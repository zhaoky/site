import{_ as n,c as s,o as a,U as p}from"./chunks/framework.V_NCB61V.js";const _=JSON.parse('{"title":"nginx 配置总结","description":"","frontmatter":{},"headers":[],"relativePath":"exp/misc/356.md","filePath":"exp/misc/356.md"}'),e={name:"exp/misc/356.md"},l=p(`<h1 id="nginx-配置总结" tabindex="-1">nginx 配置总结 <a class="header-anchor" href="#nginx-配置总结" aria-label="Permalink to &quot;nginx 配置总结&quot;">​</a></h1><h2 id="nginx-介绍" tabindex="-1">nginx 介绍 <a class="header-anchor" href="#nginx-介绍" aria-label="Permalink to &quot;nginx 介绍&quot;">​</a></h2><p><code>nginx</code> 是一个高性能的 <code>web</code> 服务器，常用作反向代理服务器。<code>nginx</code> 作为反向代理服务器，就是把 <code>http</code> 请求转发到另一个或者一些服务器上。 通过把本地一个 <code>url</code> 前缀映射到要跨域访问的 <code>web</code> 服务器上，就可以实现跨域访问。 对于浏览器来说，访问的就是同源服务器上的一个 <code>url</code>。而 <code>nginx</code> 通过检测 <code>url</code> 前缀，把 <code>http</code> 请求转发到后面真实的物理服务器。并通过 <code>rewrite</code> 命令把前缀再去掉。这样真实的服务器就可以正确处理请求，并且并不知道这个请求是来自代理服务器的。 简单说，<code>nginx</code> 服务器欺骗了浏览器，让它认为这是同源调用，从而解决了浏览器的跨域问题。又通过重写 <code>url</code>，欺骗了真实的服务器，让它以为这个 <code>http</code> 请求是直接来自与用户浏览器的。 这样，为了解决跨域问题，只需要动一下 <code>nginx</code> 配置文件即可。简单、强大、高效!</p><h2 id="nginx-conf-配置文件" tabindex="-1">nginx.conf 配置文件 <a class="header-anchor" href="#nginx-conf-配置文件" aria-label="Permalink to &quot;nginx.conf 配置文件&quot;">​</a></h2><p><code>Nginx</code> 配置文件主要分成四部分：<code>main（全局设置）</code>、<code>server（主机设置）</code>、<code>upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）</code>和 <code>location（URL 匹配特定位置后的设置）</code>，每部分包含若干个指令。</p><p><code>main</code> 部分设置的指令将影响其它所有部分的设置；<code>server</code>部分的指令主要用于指定虚拟主机域名、IP 和端口；<code>upstream</code> 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；<code>location</code> 部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p><p>他们之间的关系是：<code>server</code> 继承 <code>main</code>，<code>location</code> 继承 <code>server</code>，<code>upstream</code> 既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p><h3 id="通用" tabindex="-1">通用 <a class="header-anchor" href="#通用" aria-label="Permalink to &quot;通用&quot;">​</a></h3><p>下面的 <code>nginx.conf</code> 简单的实现 <code>nginx</code> 在前端做反向代理服务器的例子，处理 <code>js、png</code> 等静态文件，<code>jsp</code> 等动态请求转发到其它服务器 <code>tomcat</code>：</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>user  www www;</span></span>
<span class="line"><span>worker_processes  2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>error_log  logs/error.log;</span></span>
<span class="line"><span>#error_log  logs/error.log  notice;</span></span>
<span class="line"><span>#error_log  logs/error.log  info;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pid        logs/nginx.pid;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>events {</span></span>
<span class="line"><span>    use epoll;</span></span>
<span class="line"><span>    worker_connections  2048;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>http {</span></span>
<span class="line"><span>    include       mime.types;</span></span>
<span class="line"><span>    default_type  application/octet-stream;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span>    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span>    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #access_log  logs/access.log  main;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    sendfile        on;</span></span>
<span class="line"><span>    # tcp_nopush     on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    keepalive_timeout  65;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # gzip压缩功能设置</span></span>
<span class="line"><span>    gzip on;</span></span>
<span class="line"><span>    gzip_min_length 1k;</span></span>
<span class="line"><span>    gzip_buffers    4 16k;</span></span>
<span class="line"><span>    gzip_http_version 1.0;</span></span>
<span class="line"><span>    gzip_comp_level 6;</span></span>
<span class="line"><span>    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span></span>
<span class="line"><span>    gzip_vary on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # http_proxy 设置</span></span>
<span class="line"><span>    client_max_body_size   10m;</span></span>
<span class="line"><span>    client_body_buffer_size   128k;</span></span>
<span class="line"><span>    proxy_connect_timeout   75;</span></span>
<span class="line"><span>    proxy_send_timeout   75;</span></span>
<span class="line"><span>    proxy_read_timeout   75;</span></span>
<span class="line"><span>    proxy_buffer_size   4k;</span></span>
<span class="line"><span>    proxy_buffers   4 32k;</span></span>
<span class="line"><span>    proxy_busy_buffers_size   64k;</span></span>
<span class="line"><span>    proxy_temp_file_write_size  64k;</span></span>
<span class="line"><span>    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # 设定负载均衡后台服务器列表</span></span>
<span class="line"><span>    upstream  backend  {</span></span>
<span class="line"><span>              #ip_hash;</span></span>
<span class="line"><span>              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;</span></span>
<span class="line"><span>              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  # 很重要的虚拟主机配置</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen       80;</span></span>
<span class="line"><span>        server_name  itoatest.example.com;</span></span>
<span class="line"><span>        root   /apps/oaapp;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        charset utf-8;</span></span>
<span class="line"><span>        access_log  logs/host.access.log  main;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        #对 / 所有做负载均衡+反向代理</span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>            root   /apps/oaapp;</span></span>
<span class="line"><span>            index  index.jsp index.html index.htm;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            proxy_pass        http://backend;</span></span>
<span class="line"><span>            proxy_redirect off;</span></span>
<span class="line"><span>            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span>
<span class="line"><span>            proxy_set_header  Host  $host;</span></span>
<span class="line"><span>            proxy_set_header  X-Real-IP  $remote_addr;</span></span>
<span class="line"><span>            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        #静态文件，nginx自己处理，不去backend请求tomcat</span></span>
<span class="line"><span>        location  ~* /download/ {</span></span>
<span class="line"><span>            root /apps/oa/fs;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            root /apps/oaapp;</span></span>
<span class="line"><span>            expires      7d;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        location /nginx_status {</span></span>
<span class="line"><span>            stub_status on;</span></span>
<span class="line"><span>            access_log off;</span></span>
<span class="line"><span>            allow 192.168.10.0/24;</span></span>
<span class="line"><span>            deny all;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location ~ ^/(WEB-INF)/ {</span></span>
<span class="line"><span>            deny all;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        #error_page  404              /404.html;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # redirect server error pages to the static page /50x.html</span></span>
<span class="line"><span>        #</span></span>
<span class="line"><span>        error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>        location = /50x.html {</span></span>
<span class="line"><span>            root   html;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ## 其它虚拟主机，server 指令开始</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="常用指令说明" tabindex="-1">常用指令说明 <a class="header-anchor" href="#常用指令说明" aria-label="Permalink to &quot;常用指令说明&quot;">​</a></h3><h4 id="main-全局配置" tabindex="-1">main 全局配置 <a class="header-anchor" href="#main-全局配置" aria-label="Permalink to &quot;main 全局配置&quot;">​</a></h4><p><code>nginx</code> 在运行时与具体业务功能（比如 <code>http</code> 服务或者 <code>email</code> 服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p><ul><li><p><code>woker_processes 2</code></p><p>在配置文件的顶级 <code>main</code> 部分，<code>worker</code> 角色的工作进程的个数，<code>master</code> 进程是接收并分配请求给 <code>worker</code> 处理。这个数值简单一点可以设置为 <code>cpu</code> 的核数 <code>grep ^processor /proc/cpuinfo | wc -l</code>，也是 <code>auto</code> 值，如果开启了 <code>ssl</code> 和 <code>gzip</code> 更应该设置成与逻辑 <code>CPU</code> 数量一样甚至为 2 倍，可以减少 <code>I/O</code> 操作。如果 <code>nginx</code> 服务器还有其它服务，可以考虑适当减少。</p></li><li><p><code>worker_cpu_affinity</code></p><p>也是写在 <code>main</code> 部分。在高并发情况下，通过设置 <code>cpu</code> 粘性来降低由于多 <code>CPU</code> 核切换造成的寄存器等现场重建带来的性能损耗。如 <code>worker_cpu_affinity 0001 0010 0100 1000</code>; （四核）。</p></li><li><p><code>worker_connections 2048</code></p><p>写在 <code>events</code> 部分。每一个 <code>worker</code> 进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。<code>nginx</code> 作为反向代理服务器，计算公式 <code>最大连接数 = worker_processes \\* worker_connections/4</code>，所以这里客户端最大连接数是 <code>1024</code>，这个可以增到到 <code>8192</code> 都没关系，看情况而定，但不能超过后面的 <code>worker_rlimit_nofile</code>。当 <code>nginx</code> 作为 <code>http</code> 服务器时，计算公式里面是除以 2。</p></li><li><p><code>worker_rlimit_nofile 10240</code></p><p>写在 <code>main</code> 部分。默认是没有设置，可以限制为操作系统最大的限制 65535。</p></li><li><p><code>use epoll</code></p><p>写在 <code>events</code> 部分。在 <code>Linux</code> 操作系统下，<code>nginx</code> 默认使用 <code>epoll</code> 事件模型，得益于此，<code>nginx</code> 在 <code>Linux</code> 操作系统下效率相当高。同时 <code>Nginx</code> 在 <code>OpenBSD</code> 或 <code>FreeBSD</code> 操作系统上采用类似于 <code>epoll</code> 的高效事件模型 <code>kqueue</code>。在操作系统不支持这些高效模型时才使用 <code>select</code>。</p></li></ul><h4 id="http-服务器" tabindex="-1">http 服务器 <a class="header-anchor" href="#http-服务器" aria-label="Permalink to &quot;http 服务器&quot;">​</a></h4><p>与提供 <code>http</code> 服务相关的一些配置参数。例如：是否使用 <code>keepalive</code> 啊，是否使用 <code>gzip</code> 进行压缩等。</p><ul><li><p><code>sendfile on</code></p><p>开启高效文件传输模式，<code>sendfile</code> 指令指定 <code>nginx</code> 是否调用 <code>sendfile</code> 函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 <code>on</code>，如果用来进行下载等应用磁盘 <code>IO</code> 重负载应用，可设置为 <code>off</code>，以平衡磁盘与网络 <code>I/O</code> 处理速度，降低系统的负载。</p></li><li><p><code>keepalive_timeout 65</code></p><p>长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s 内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</p></li><li><p><code>send_timeout</code></p><p>用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx 将会关闭连接。</p></li><li><p><code>client_max_body_size 10m</code></p><p>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</p></li><li><p><code>client_body_buffer_size 128k</code></p><p>缓冲区代理缓冲用户端请求的最大字节数</p></li></ul><h5 id="模块-http-proxy" tabindex="-1">模块 http_proxy <a class="header-anchor" href="#模块-http-proxy" aria-label="Permalink to &quot;模块 http_proxy&quot;">​</a></h5><p>这个模块实现的是 <code>nginx</code> 作为反向代理服务器的功能，包括缓存功能（另见文章）</p><ul><li><p><code>proxy_connect_timeout 60</code></p><p>nginx 跟后端服务器连接超时时间(代理连接超时)</p></li><li><p><code>proxy_read_timeout 60</code></p><p>连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</p></li><li><p><code>proxy_buffer_size 4k</code></p><p>设置代理服务器（nginx）从后端 realserver 读取并保存用户头信息的缓冲区大小，默认与 proxy_buffers 大小相同，其实可以将这个指令值设的小一点</p></li><li><p><code>proxy_buffers 4 32k</code></p><p>proxy_buffers 缓冲区，nginx 针对单个连接缓存来自后端 realserver 的响应，网页平均在 32k 以下的话，这样设置</p></li><li><p><code>proxy_busy_buffers_size 64k</code></p><p>高负荷下缓冲大小（proxy_buffers*2）</p></li><li><p><code>proxy_max_temp_file_size</code></p><p>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认 1024M，它与 proxy_cache 没有关系。大于这个值，将从 upstream 服务器传回。设置为 0 禁用。</p></li><li><p><code>proxy_temp_file_write_size 64k</code></p><p>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</p></li></ul><h5 id="模块-http-gzip" tabindex="-1">模块 http_gzip <a class="header-anchor" href="#模块-http-gzip" aria-label="Permalink to &quot;模块 http_gzip&quot;">​</a></h5><ul><li><p><code>gzip on</code> : 开启 gzip 压缩输出，减少网络传输。</p><ul><li><code>gzip_min_length 1k</code> ： 设置允许压缩的页面最小字节数，页面字节数从 header 头得 content-length 中进行获取。默认值是 20。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。</li><li><code>gzip_buffers 4 16k</code> ： 设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流。4 16k 代表以 16k 为单位，安装原始数据大小以 16k 为单位的 4 倍申请内存。</li><li><code>gzip_http_version 1.0</code> ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li><li><code>gzip_comp_level 6</code> ： gzip 压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理速度最慢(传输快但比较消耗 cpu)</li><li><code>gzip_types</code> ：匹配 mime 类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li><li><code>gzip_proxied any</code> ： Nginx 作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header 头。</li><li><code>gzip_vary on</code> ： 和 http 头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过 gzip 压缩的页面，例如，用 Squid 缓存经过 Nginx 压缩的数据。。</li></ul></li></ul><h4 id="server-虚拟主机" tabindex="-1">server 虚拟主机 <a class="header-anchor" href="#server-虚拟主机" aria-label="Permalink to &quot;server 虚拟主机&quot;">​</a></h4><p>http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server。每个 server 通过监听地址或端口来区分。</p><ul><li><code>listen</code>:监听端口，默认 80，小于 1024 的要以 root 启动。可以为 listen *:80、listen 127.0.0.1:80 等形式。</li><li><code>server_name</code>:服务器名，如 localhost、www.example.com，可以通过正则匹配。</li></ul><h5 id="模块-http-stream" tabindex="-1">模块 http_stream <a class="header-anchor" href="#模块-http-stream" aria-label="Permalink to &quot;模块 http_stream&quot;">​</a></h5><p>这个模块通过一个简单的调度算法来实现客户端 IP 到后端服务器的负载均衡，upstream 后接负载均衡器的名字，后端 realserver 以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p><h4 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;location&quot;">​</a></h4><p>http 服务中，某些特定的 URL 对应的一系列配置项。</p><ul><li><p><code>root /var/www/html</code></p><p>定义服务器的默认网站根目录位置。如果 locationURL 匹配的是子目录或文件，root 没什么作用，一般放在 server 指令里面或/下。</p></li><li><p><code>index.jsp index.html index.htm</code></p><p>定义路径下默认访问的文件名，一般跟着 root 放</p></li><li><p><code>proxy_pass http:/backend</code></p><p>请求转向 backend 定义的服务器列表，即反向代理，对应 upstream 负载均衡器。也可以 <code>proxy_pass http://ip:port</code>。</p></li><li><p><code>proxy_redirect off;</code></p><p><code>proxy_set_header Host \\$host;</code></p><p><code>proxy_set_header X-Real-IP \\$remote_addr;</code></p><p><code>proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;</code></p><p>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</p></li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><h4 id="访问控制-allow-deny" tabindex="-1">访问控制 allow/deny <a class="header-anchor" href="#访问控制-allow-deny" aria-label="Permalink to &quot;访问控制 allow/deny&quot;">​</a></h4><p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个 allow,deny，允许或禁止某个 ip 或 ip 段访问，依次满足任何一个规则就停止往下匹配。如：</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>location /nginx-status {</span></span>
<span class="line"><span>  stub_status on;</span></span>
<span class="line"><span>  access_log off;</span></span>
<span class="line"><span>#  auth_basic   &quot;NginxStatus&quot;;</span></span>
<span class="line"><span>#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  allow 192.168.10.100;</span></span>
<span class="line"><span>  allow 172.29.73.0/24;</span></span>
<span class="line"><span>  deny all;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># htpasswd -c htpasswd admin</span></span>
<span class="line"><span>New passwd:</span></span>
<span class="line"><span>Re-type new password:</span></span>
<span class="line"><span>Adding password for user admin</span></span>
<span class="line"><span></span></span>
<span class="line"><span># htpasswd htpasswd admin    //修改admin密码</span></span>
<span class="line"><span># htpasswd htpasswd sean    //多添加一个认证用户</span></span></code></pre></div><p>这样就生成了默认使用 CRYPT 加密的密码文件。打开上面 nginx-status 的两行注释，重启 nginx 生效。</p><h4 id="列出目录-autoindex" tabindex="-1">列出目录 autoindex <a class="header-anchor" href="#列出目录-autoindex" aria-label="Permalink to &quot;列出目录 autoindex&quot;">​</a></h4><p>Nginx 默认是不允许列出整个目录的。如需此功能，打开 nginx.conf 文件，在 location，server 或 http 段中加入 autoindex on;，另外两个参数最好也加上去:</p><ul><li><p><code>autoindex_exact_size off;</code></p><p>默认为 on，显示出文件的确切大小，单位是 bytes。改为 off 后，显示出文件的大概大小，单位是 kB 或者 MB 或者 GB</p></li><li><p><code>autoindex_localtime on;</code></p><p>默认为 off，显示的文件时间为 GMT 时间。改为 on 后，显示的文件时间为文件的服务器时间</p></li></ul><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>location /images {</span></span>
<span class="line"><span>  root   /var/www/nginx-default/images;</span></span>
<span class="line"><span>  autoindex on;</span></span>
<span class="line"><span>  autoindex_exact_size off;</span></span>
<span class="line"><span>  autoindex_localtime on;</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h2 id="重新加载-nginx-配置文件" tabindex="-1">重新加载 nginx 配置文件 <a class="header-anchor" href="#重新加载-nginx-配置文件" aria-label="Permalink to &quot;重新加载 nginx 配置文件&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><h2 id="location-正则写法" tabindex="-1">location 正则写法 <a class="header-anchor" href="#location-正则写法" aria-label="Permalink to &quot;location 正则写法&quot;">​</a></h2><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>location  = / {</span></span>
<span class="line"><span>  # 精确匹配 / ，主机名后面不能带任何字符串</span></span>
<span class="line"><span>  [ configuration A ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location  / {</span></span>
<span class="line"><span>  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span></span>
<span class="line"><span>  # 但是正则和最长字符串会优先匹配</span></span>
<span class="line"><span>  [ configuration B ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location /documents/ {</span></span>
<span class="line"><span>  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span></span>
<span class="line"><span>  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span>
<span class="line"><span>  [ configuration C ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location ~ /documents/Abc {</span></span>
<span class="line"><span>  # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</span></span>
<span class="line"><span>  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span>
<span class="line"><span>  [ configuration CC ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location ^~ /images/ {</span></span>
<span class="line"><span>  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span></span>
<span class="line"><span>  [ configuration D ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location ~* \\.(gif|jpg|jpeg)$ {</span></span>
<span class="line"><span>  # 匹配所有以 gif,jpg或jpeg 结尾的请求</span></span>
<span class="line"><span>  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span></span>
<span class="line"><span>  [ configuration E ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location /images/ {</span></span>
<span class="line"><span>  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span></span>
<span class="line"><span>  [ configuration F ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location /images/abc {</span></span>
<span class="line"><span>  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span></span>
<span class="line"><span>  # F与G的放置顺序是没有关系的</span></span>
<span class="line"><span>  [ configuration G ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location ~ /images/abc/ {</span></span>
<span class="line"><span>  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span></span>
<span class="line"><span>    [ configuration H ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location ~* /js/.*/\\.js</span></span></code></pre></div><ul><li>以<code>=</code>开头表示精确匹配</li><li>如<code>A</code>中只匹配根目录结尾的请求，后面不能带任何字符串。</li><li><code>^~</code>开头表示<code>uri</code>以某个常规字符串开头，不是正则匹配</li><li><code>~</code>开头表示区分大小写的正则匹配;</li><li><code>~\\*</code>开头表示不区分大小写的正则匹配</li><li><code>/</code>通用匹配, 如果没有其它匹配,任何请求都会匹配到</li><li>顺序<code>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</code></li></ul><p>按照上面的 location 写法，以下的匹配示例成立:</p><ul><li>/ -&gt; config A 精确完全匹配，即使/index.html 也匹配不了</li><li>/downloads/download.html -&gt; config B 匹配 B 以后，往下没有任何匹配，采用 B</li><li>/images/1.gif -&gt; configuration D 匹配到 F，往下匹配到 D，停止往下</li><li>/images/abc/def -&gt; config D 最长匹配到 G，往下匹配 D，停止往下 你可以看到 任何以/images/开头的都会匹配到 D 并停止，FG 写在这里是没有任何意义的，H 是永远轮不到的，这里只是为了说明匹配顺序</li><li>/documents/document.html -&gt; config C 匹配到 C，往下没有任何匹配，采用 C</li><li>/documents/1.jpg -&gt; configuration E 匹配到 C，往下正则匹配到 E</li><li>/documents/Abc.jpg -&gt; config CC 最长匹配到 C，往下正则顺序匹配到 CC，不会往下到 E</li></ul><p>实际使用建议</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</span></span>
<span class="line"><span>#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span></span>
<span class="line"><span>#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span></span>
<span class="line"><span># 第一个必选规则</span></span>
<span class="line"><span>location = / {</span></span>
<span class="line"><span>    proxy_pass http://tomcat:8080/index</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span></span>
<span class="line"><span># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></span>
<span class="line"><span>location ^~ /static/ {</span></span>
<span class="line"><span>    root /webroot/static/;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ {</span></span>
<span class="line"><span>    root /webroot/res/;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></span>
<span class="line"><span>#非静态文件请求就默认是动态请求，自己根据实际把握</span></span>
<span class="line"><span>#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span></span>
<span class="line"><span>location / {</span></span>
<span class="line"><span>    proxy_pass http://tomcat:8080/</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="rewrite-规则" tabindex="-1">Rewrite 规则 <a class="header-anchor" href="#rewrite-规则" aria-label="Permalink to &quot;Rewrite 规则&quot;">​</a></h2><p><code>rewrite</code>使用<code>nginx</code>提供的全局变量或自己设置的变量，结合<code>正则表达式</code>和<code>标志位</code>实现 url 重写以及重定向。</p><p><code>rewrite</code> 只能放在 <code>server{},location{},if{}</code>中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <code>http://seanlook.com/a/we/index.php?id=1&amp;u=str</code> 只对<code>/a/we/index.php</code> 重写。</p><p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用 <code>proxy_pass</code> 反向代理。</p><p>表明看 <code>rewrite</code> 和 <code>location</code> 功能有点像，都能实现跳转，主要区别在于 <code>rewrite</code> 是在同一域名内更改获取资源的路径，而 <code>location</code> 是对一类路径做控制访问或反向代理，可以 <code>proxy_pass</code> 到其他机器。很多情况下 <code>rewrite</code> 也会写在 <code>location</code> 里，它们的执行顺序是：</p><ul><li>执行 <code>server</code> 块的 <code>rewrite</code> 指令</li><li>执行 location 匹配</li><li>执行选定的 location 中的 rewrite 指令</li></ul><p>如果其中某步 <code>URI</code> 被重写，则重新循环执行 <code>1-3</code>，直到找到真实存在的文件；循环超过 10 次，则返回 500 Internal Server Error 错误。</p><h3 id="flag-标志位" tabindex="-1">flag 标志位 <a class="header-anchor" href="#flag-标志位" aria-label="Permalink to &quot;flag 标志位&quot;">​</a></h3><ul><li><code>last</code> : 相当于 Apache 的<code>[L]</code>标记，表示完成 rewrite</li><li><code>break</code> : 停止执行当前虚拟主机的后续 rewrite 指令集</li><li><code>redirect</code> : 返回 302 临时重定向，地址栏会显示跳转后的地址</li><li><code>permanent</code> : 返回 301 永久重定向，地址栏会显示跳转后的地址</li></ul><p>因为 301 和 302 不能简单的只返回状态码，还必须有重定向的 URL，这就是 return 指令无法返回 301,302 的原因了。这里 last 和 break 区别有点难以理解：</p><ul><li>last 一般写在 server 和 if 中，而 break 一般使用在 location 中</li><li>last 不终止重写后的 url 匹配，即新的 url 会再从 server 走一遍匹配流程，而 break 终止重写后的匹配</li><li>break 和 last 都能阻止继续执行后面的 rewrite 指令</li></ul><h3 id="if-指令与全局变量" tabindex="-1">if 指令与全局变量 <a class="header-anchor" href="#if-指令与全局变量" aria-label="Permalink to &quot;if 指令与全局变量&quot;">​</a></h3><h4 id="if-判断指令" tabindex="-1">if 判断指令 <a class="header-anchor" href="#if-判断指令" aria-label="Permalink to &quot;if 判断指令&quot;">​</a></h4><p>语法为 <code>if(condition){...}</code>，对给定的条件 <code>condition</code> 进行判断。如果为真，大括号内的 <code>rewrite</code> 指令将被执行，if 条件(<code>conditon</code>)可以是如下任何内容：</p><ul><li>当表达式只是一个变量时，如果值为空或任何以 0 开头的字符串都会当做 false</li><li>直接比较变量和内容时，使用<code>=或!=</code></li><li><code>~</code>正则表达式匹配，<code>~\\*</code>不区分大小写的匹配，<code>!~</code>区分大小写的不匹配</li><li><code>-f 和!-f</code> 用来判断是否存在文件</li><li>\`-d 和!-d 用来判断是否存在目录</li><li><code>-e 和!-e</code> 用来判断是否存在文件或目录</li><li><code>-x 和!-x</code> 用来判断文件是否可执行</li></ul><p>例如：</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>if ($http_user_agent ~ MSIE) {</span></span>
<span class="line"><span>    rewrite ^(.*)$ /msie/$1 break;</span></span>
<span class="line"><span>} //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) {</span></span>
<span class="line"><span>    set $id $1;</span></span>
<span class="line"><span> } //如果cookie匹配正则，设置变量$id等于正则引用部分</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if ($request_method = POST) {</span></span>
<span class="line"><span>    return 405;</span></span>
<span class="line"><span>} //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if ($slow) {</span></span>
<span class="line"><span>    limit_rate 10k;</span></span>
<span class="line"><span>} //限速，$slow可以通过 set 指令设置</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (!-f $request_filename){</span></span>
<span class="line"><span>    break;</span></span>
<span class="line"><span>    proxy_pass  http://127.0.0.1;</span></span>
<span class="line"><span>} //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if ($args ~ post=140){</span></span>
<span class="line"><span>    rewrite ^ http://example.com/ permanent;</span></span>
<span class="line"><span>} //如果query string中包含&quot;post=140&quot;，永久重定向到example.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>location ~* \\.(gif|jpg|png|swf|flv)$ {</span></span>
<span class="line"><span>    valid_referers none blocked www.jefflei.com www.leizhenfang.com;</span></span>
<span class="line"><span>    if ($invalid_referer) {</span></span>
<span class="line"><span>        return 404;</span></span>
<span class="line"><span>    } //防盗链</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h4><p>下面是可以用作 if 判断的全局变量:</p><ul><li><code>$args</code> ： #这个变量等于请求行中的参数，同$query_string</li><li><code>$content_length</code> ： 请求头中的 Content-length 字段。</li><li><code>$content_type</code> ： 请求头中的 Content-Type 字段。</li><li><code>$document_root</code> ： 当前请求在 root 指令中指定的值。</li><li><code>$host</code> ： 请求主机头字段，否则为服务器名称。</li><li><code>$http_user_agent</code> ： 客户端 agent 信息</li><li><code>$http_cookie</code> ： 客户端 cookie 信息</li><li><code>$limit_rate</code> ： 这个变量可以限制连接速率。</li><li><code>$request_method</code> ： 客户端请求的动作，通常为 GET 或 POST。</li><li><code>$remote_addr</code> ： 客户端的 IP 地址。</li><li><code>$remote_port</code> ： 客户端的端口。</li><li><code>$remote_user</code> ： 已经经过 Auth Basic Module 验证的用户名。</li><li><code>$request_filename</code> ： 当前请求的文件路径，由 root 或 alias 指令与 URI 请求生成。</li><li><code>$scheme</code> ： HTTP 方法（如 http，https）。</li><li><code>$server_protocol</code> ： 请求使用的协议，通常是 HTTP/1.0 或 HTTP/1.1。</li><li><code>$server_addr</code> ： 服务器地址，在完成一次系统调用后可以确定这个值。</li><li><code>$server_name</code> ： 服务器名称。</li><li><code>$server_port</code> ： 请求到达服务器的端口号。</li><li><code>$request_uri</code> ： 包含请求参数的原始 URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</li><li><code>$uri</code> ： 不带请求参数的当前 URI，$uri 不包含主机名，如”/foo/bar.html”。</li><li><code>$document_uri</code> ： 与$uri 相同。</li></ul><p>例：<code>http://localhost:88/test1/test2/test.php</code></p><ul><li><code>$host</code>：<code>localhost</code></li><li><code>$server_port</code>：<code>88</code></li><li><code>$request_uri</code>：<code>http://localhost:88/test1/test2/test.php</code></li><li><code>$document_uri</code>：<code>/test1/test2/test.php</code></li><li><code>$document_root</code>：<code>/var/www/html</code></li><li><code>$request_filename</code>：<code>/var/www/html/test1/test2/test.php</code></li></ul><h4 id="rewrite-实例" tabindex="-1">rewrite 实例 <a class="header-anchor" href="#rewrite-实例" aria-label="Permalink to &quot;rewrite 实例&quot;">​</a></h4><p>例 1：</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>http { # 定义 image 日志格式</span></span>
<span class="line"><span>log_format imagelog &#39;[$time_local] &#39; $image_file &#39; &#39; $image_type &#39; &#39; $body_bytes_sent &#39; &#39; $status; # 开启重写日志</span></span>
<span class="line"><span>rewrite_log on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        root /home/www;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>                # 重写规则信息</span></span>
<span class="line"><span>                error_log logs/rewrite.log notice;</span></span>
<span class="line"><span>                # 注意这里要用‘’单引号引起来，避免{}</span></span>
<span class="line"><span>                rewrite &#39;^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\\.(png|jpg|gif)$&#39; /data?file=$3.$4;</span></span>
<span class="line"><span>                # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span></span>
<span class="line"><span>                set $image_file $3;</span></span>
<span class="line"><span>                set $image_type $4;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location /data {</span></span>
<span class="line"><span>                # 指定针对图片的日志格式，来分析图片类型和大小</span></span>
<span class="line"><span>                access_log logs/images.log mian;</span></span>
<span class="line"><span>                root /data/images;</span></span>
<span class="line"><span>                # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span></span>
<span class="line"><span>                try_files /$arg_file /image404.html;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        location = /image404.html {</span></span>
<span class="line"><span>                # 图片不存在返回特定的信息</span></span>
<span class="line"><span>                return 404 &quot;image not found\\n&quot;;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>对形如<code>/images/ef/uh7b3/test.png</code> 的请求，重写到<code>/data?file=test.png</code>，于是匹配到 <code>location /data</code>，先看<code>/data/images/test.png</code> 文件存不存在，如果存在则正常响应，如果不存在则重写 <code>tryfiles</code> 到新的 <code>image404 location</code>，直接返回 <code>404</code> 状态码。</p><p>例 2：</p><div class="language-config vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">config</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>rewrite ^/images/(.\\*)\\_(\\d+)x(\\d+)\\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=\\$3? last;</span></span></code></pre></div><p>对形如<code>/images/bla_500x400.jpg</code> 的文件请求，重写到<code>/resizer/bla.jpg?width=500&amp;height=400</code> 地址，并会继续尝试匹配 <code>location</code>。</p><p>其他参考：<a href="https://github.com/dunwu/nginx-tutorial" target="_blank" rel="noreferrer">Nginx 极简教程</a></p>`,80),i=[l];function o(c,t,d,r,h,g){return a(),s("div",null,i)}const m=n(e,[["render",o]]);export{_ as __pageData,m as default};
