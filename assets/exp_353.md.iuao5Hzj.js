import{_ as i,c as s,o as e,U as a}from"./chunks/framework.H2RWGpQP.js";const u=JSON.parse('{"title":"CSS Grid布局","description":"","frontmatter":{},"headers":[],"relativePath":"exp/353.md","filePath":"exp/353.md"}'),l={name:"exp/353.md"},t=a(`<h1 id="css-grid布局" tabindex="-1">CSS Grid布局 <a class="header-anchor" href="#css-grid布局" aria-label="Permalink to &quot;CSS Grid布局&quot;">​</a></h1><h2 id="什么是-grid" tabindex="-1">什么是 grid <a class="header-anchor" href="#什么是-grid" aria-label="Permalink to &quot;什么是 grid&quot;">​</a></h2><p>网格布局（<code>Grid</code>）是最强大的 <code>CSS</code> 布局方案。它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。浏览器支持程度<a href="https://www.caniuse.com/#search=grid" target="_blank" rel="noreferrer">查阅</a>。</p><p>设为网格布局以后，容器子元素的 <code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code> 和 <code>column-*</code>等设置都将失效。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 行内元素 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="容器的属性" tabindex="-1">容器的属性 <a class="header-anchor" href="#容器的属性" aria-label="Permalink to &quot;容器的属性&quot;">​</a></h2><p>以下属性设置在 <code>grid</code> 布局中的父元素（即设有 <code>display:grid</code> 的元素），用来控制内部子元素的行为。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><p><code>grid-template-columns/grid-template-rows</code> 定义每一列的列宽/每一行的行宽</p><ul><li><code>none</code> 所有的列和其大小都将由 <code>grid-auto-columns</code> 属性隐式的指定。</li><li><code>fr</code> 表示比例关系,按比例分配剩余的可用空间</li><li><code>auto</code> 由浏览器自己决定长度</li><li><code>&lt;length&gt;</code> 非负值的长度大小</li><li><code>&lt;percentage&gt;</code> 非负值且相对于网格容器的百分比</li><li><code>repeat(&lt;number&gt;|auto-fill|auto-fit,value)</code> 重复设置。第一个参数是重复次数，第二个参数是重复的值。<code>auto-fill</code>指容纳尽可能多的子元素。</li><li><code>minmax(min, max)</code> 表示长度范围</li></ul></li><li><p><code>column-gap/row-gap/gap</code> 定义列间距/行间距/两者合并简写(<code>&lt;row-gap&gt; &lt;column-gap&gt;</code>,简写若省略第二个值，即表示跟第一个值一样)</p><ul><li><code>&lt;length&gt;</code> 非负值的长度大小</li><li><code>&lt;percentage&gt;</code> 非负值列之间的间隔大小</li></ul></li><li><p><code>grid-auto-flow</code> 定义子元素排列顺序是先行后列还是先列后行</p><ul><li><code>row(默认)</code> 先行后列</li><li><code>column</code> 先列后行</li><li><code>row dense</code> 先行后列,并且尽量填满空格</li><li><code>column dense</code> 先列后行,并且尽量填满空格</li></ul></li><li><p><code>justify-items/align-items/place-items</code> 定义子元素内容水平位置（左中右）/垂直位置（上中下）/两者合并简写（<code>&lt;align-items&gt; &lt;justify-items&gt;</code>,简写若省略第二个值，即表示跟第一个值一样）</p><ul><li><code>stretch(默认)</code> 拉伸，占满单元格的整个宽度</li><li><code>start</code> 对齐单元格的起始边缘</li><li><code>end</code> 对齐单元格的结束边缘</li><li><code>center</code> 单元格内部居中</li></ul></li><li><p><code>justify-content/align-content/place-content</code> 定义整个内容在容器里的水平位置（左中右）/垂直位置（上中下）/两者合并简写（<code>&lt;align-content&gt; &lt;justify-content&gt;</code>简写若省略第二个值，即表示跟第一个值一样）</p><ul><li><code>start</code> 对齐容器的起始边框</li><li><code>end</code> 对齐容器的结束边框</li><li><code>center</code> 容器内部居中</li><li><code>stretch</code> 项目大小没有指定时，拉伸占据整个网格容器</li><li><code>space-around</code> 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</li><li><code>space-between</code> 项目与项目的间隔相等，项目与容器边框之间没有间隔</li><li><code>space-evenly</code> 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</li></ul></li><li><p><code>grid-auto-columns/grid-auto-rows</code> 定义浏览器自动创建的多余网格的列宽和行高，取值与<code>grid-template-columns/grid-template-rows</code>相同。</p></li><li><p><code>grid-template-areas</code> 定义区域，一个区域由单个或多个单元格组成。如果某些区域不需要利用，则使用&quot;点&quot;（<code>.</code>）表示。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">grid-template-areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> header&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sidebar&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">footer</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> footer&#39;;</span></span></code></pre></div><p>区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<code>区域名-start</code>，终止网格线自动命名为<code>区域名-end</code>。</p></li></ul><h2 id="容器内子元素的属性" tabindex="-1">容器内子元素的属性 <a class="header-anchor" href="#容器内子元素的属性" aria-label="Permalink to &quot;容器内子元素的属性&quot;">​</a></h2><ul><li><p><code>grid-column-start/grid-column-end/grid-row-start/grid-row-end</code> 定义子元素的<code>左边框/右边框/上边框/下边框</code>的网格线。</p><ul><li><code>&lt;number&gt;</code> 指定第几根网格线</li><li><code>&lt;网格线名字&gt;</code> 直接指定网格线名字如（<code>区域名-start</code>）</li><li><code>span &lt;number&gt;</code> 指跨越多少个网格</li></ul></li><li><p><code>grid-column/grid-row</code> 分别是<code>grid-column-start,grid-column-end</code>,<code>grid-row-start,grid-row-end</code>的合并简写（<code>&lt;start&gt; / &lt;end&gt;</code>）,斜杠以及后面的部分可以省略，默认跨越一个网格。</p></li><li><p><code>grid-area</code> 指定子元素放在哪一个区域。也作为<code>grid-row-start、grid-column-start、grid-row-end、grid-column-end</code>的合并简写:<code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code></p></li><li><p><code>justify-self/align-self/place-self</code>定义某个单独的子元素内容水平位置（左中右）/垂直位置（上中下）/两者合并简写（<code>&lt;align-items&gt; &lt;justify-items&gt;</code>,简写若省略第二个值，即表示跟第一个值一样）。</p><ul><li>用法取值跟<code>justify-items/align-items/place-items</code>一样，只是作用于单个子元素。</li></ul></li></ul><blockquote><p>参考：<a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noreferrer">CSS Grid 网格布局教程</a></p></blockquote>`,12),d=[t];function n(o,c,p,r,h,k){return e(),s("div",null,d)}const E=i(l,[["render",n]]);export{u as __pageData,E as default};
