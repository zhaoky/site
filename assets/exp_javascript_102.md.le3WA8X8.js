import{_ as i,c as a,o as n,R as l}from"./chunks/framework.4AYGp9T7.js";const h="/img/exp-102-1.webp",p="/img/exp-102-2.webp",k="/img/exp-102-3.webp",e="/img/exp-102-4.webp",t="/img/exp-102-5.webp",d="/img/exp-102-6.webp",r="/img/exp-102-7.webp",E="/img/exp-102-8.webp",o="/img/exp-102-9.webp",c="/img/exp-102-10.webp",g="/img/exp-102-11.webp",y="/img/exp-102-12.webp",F="/img/exp-102-13.webp",A="/img/exp-102-14.webp",v=JSON.parse('{"title":"从小程序子包脚手架到工程化","description":"","frontmatter":{},"headers":[],"relativePath":"exp/javascript/102.md","filePath":"exp/javascript/102.md"}'),C={name:"exp/javascript/102.md"};function u(D,s,m,B,b,f){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="从小程序子包脚手架到工程化" tabindex="-1">从小程序子包脚手架到工程化 <a class="header-anchor" href="#从小程序子包脚手架到工程化" aria-label="Permalink to &quot;从小程序子包脚手架到工程化&quot;">​</a></h1><blockquote><p>在小程序子包定制开发的实施交付过程中，如何提高定开的交付效率，保证定开子包的质量？本文展示了如何设计这一套子包脚手架及工程化方案。</p></blockquote><h1 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h1><p>交付中心在交付客户的业务形态中，小程序联合开发的交付方式占比很高，其中又以定开子包交付为主。即很多客户都有自己的小程序，交付开发组只需将业务闭环（与主包无耦合）在自己的小程序子包中，通过小程序分包的模式，交付子包合入客户的小程序即可。目前团队里现有的开发模式存在以下一些问题：</p><ol><li>开发过程中缺乏可复用的小程序定开子包脚手架模板。意味着每新接入一个客户，开发人员在创建新的项目时，都需要从零开始重复搭建项目来开发，这无疑增加了开发周期和潜在的错误几率；</li><li>缺乏明确的开发规范，如 <code>js</code> 代码为原生编写、本地及远端均没有做提交拦截检查等，降低了开发效率，同时也无法有效保证质量；</li><li>缺乏流水线自动化构建，图片等静态资源需要手动上传 <code>CDN</code>、也需要人肉手动构建不同环境、不同需求的产物等，容易出错；</li><li>无法保证子包 <code>css、js</code> 隔离性（<code>sandbox</code>），<code>css</code> 会受主包全局样式影响，<code>js</code> 里缓存、全局变量如 <code>global</code> 等也会被污染；</li><li>目前交付业务中优码侧业务占比较高，并且不同优码客户用到的能力或页面功能都大同小异，但对这块业务核心逻辑并没有做通用化梳理，提取核心链路并复用，导致不同客户的核心业务重复编写，效率低下耗费人力；</li></ol><p>基于以上现状，我们设计并完善了一套可移植、可扩展的并内含优码通用业务的子包脚手架模板的前端工程化解决方案。</p><h2 id="子包开发工程化总览" tabindex="-1">子包开发工程化总览 <a class="header-anchor" href="#子包开发工程化总览" aria-label="Permalink to &quot;子包开发工程化总览&quot;">​</a></h2><p><img src="'+h+'" alt="总览"></p><p>如图所示，通过 <code>cli</code> 工具提供开箱即用的能力，可一键生成并选择是否需要子应用隔离（<code>sandbox</code>）等优码定开业务的子包脚手架模板。安装依赖后，即可在本地运行项目。</p><p>通常情况下，开发者无需关注项目模板里通用层代码，可将精力聚焦在定开层的开发与交付，提交交付效率。开发完成后，通过流水线可以进行不同模式的产物构建并交付客户。以下分别从子包脚手架模板及 <code>cli</code> 工具、优码业务层通用化剥离、流水线 3 个部分来介绍整套工程化方案的特点与能力支持。</p><h2 id="定开子包脚手架模板及-cli-工具" tabindex="-1">定开子包脚手架模板及 cli 工具 <a class="header-anchor" href="#定开子包脚手架模板及-cli-工具" aria-label="Permalink to &quot;定开子包脚手架模板及 cli 工具&quot;">​</a></h2><p>我们对子包脚手架模板项目进行了简单的分层设计，从下到上依次为项目基础结构、构建层、服务层、组件层、业务层，共同完成小程序子包项目结构的搭建。</p><p><img src="'+p+'" alt="子包脚手架模板"></p><h3 id="项目基础结构" tabindex="-1">项目基础结构 <a class="header-anchor" href="#项目基础结构" aria-label="Permalink to &quot;项目基础结构&quot;">​</a></h3><p>整体项目由 <code>typescript + less</code> 编码支持，提高编码效率并保证代码质量。开发规范沿用腾讯编码规范（代码、目录、命名、协作、提交、注释等）并引入了 <code>eslint</code>、<code>stylelint</code>、<code>prettier</code>、<code>editorconfig</code>、<code>vscode</code> 等配置进行代码及风格约束统一，通过 <code>git commit hook</code> 完成本地提交时对 <code>commit msg</code> 及代码检查，并按照协作规范（如下图）完成开发协作。</p><p><img src="'+k+'" alt="协作规范"></p><p>整体项目结构如下图：</p><p><img src="'+e+`" alt="目录"></p><ul><li><code>mock</code> 文件夹为接口列表对应的各接口的 <code>mock</code> 数据，协议先行前置本地联调，可以提前暴露协议风险，在后续真正接口联调阶段可以减少沟通成本，提高联调效率；</li><li><code>config</code> 文件夹为客户项目配置文件夹，存放 <code>env.js</code>，由 <code>cli</code> 工具配置生成，构建时强依赖。该文件与各层解耦，存放了本业务的各环境对应的所有配置，包括分配的 <code>CDN</code> 地址、<code>api</code> 地址、监控上报地址、验签 <code>key</code> 等，统一收敛避免分散在各业务及服务中，方便调整维护。</li></ul><p>其中主要关注 <code>src</code>：</p><ul><li><code>mock</code> 文件夹为当前客户相关的模拟数据，如登录态、授权信息、微信步数等数据，用于未合包之前的本地联调开发及本地测试；</li><li><code>pages</code> 文件夹为当前客户相关的模拟主包部分页面，用于模拟分包跳转及一些主包的功能页；</li><li><code>sub-package</code> 文件夹为当前子包全部内容，文件夹名则为子包名，由 <code>cli</code> 工具配置生成。该文件夹即为整个定开业务，内部功能闭环，打包构建会将其编译压缩，最终以子包形态交付给客户；</li><li><code>test</code> 文件夹为单元测试用例集；</li><li><code>src</code> 里其他 <code>app.json</code>,<code>app.ts</code>,<code>project.config</code> 等为小程序本地分包开发模拟的必要文件；</li></ul><p>可以看到，项目基础结构为一个完整的小程序工程，但根据业务交付特殊场景，实际的交付只交付子包 <code>sub-package</code>，其他都是为了方便在本地进行开发联调及测试。所以需保证 <code>sub-package</code> 与其他模块无耦合，同时保证应用隔离（<code>css、js</code>），且具备完整闭环功能。</p><h3 id="构建层" tabindex="-1">构建层 <a class="header-anchor" href="#构建层" aria-label="Permalink to &quot;构建层&quot;">​</a></h3><p>目前通过通过 <code>gulp</code> 进行小程序的开发监听和构建编译处理，通过读取环境配置文件 <code>env.js</code>，支持</p><ul><li>多构建模式：整包模拟、生产子包；</li><li>多环境：<code>qa、green、prod</code>;</li><li>资源处理：本地开发时的兼容性处理和生产模式中的 CDN 转换路径、混淆压缩等;</li><li>应用隔离 <code>sandbox</code>：<code>css、js</code></li><li>npm 构建：整包模拟构建、子包构建</li></ul><h4 id="子应用隔离" tabindex="-1">子应用隔离 <a class="header-anchor" href="#子应用隔离" aria-label="Permalink to &quot;子应用隔离&quot;">​</a></h4><p>小程序框架系统分为视图层和逻辑层。对于视图层，不同页面的 <code>DOM</code> 和 <code>CSS</code> 天然隔离，但各页面的样式都会受到全局样式（<code>app.wxss</code>）影响，如何隔离 <code>CSS</code> 不受影响呢？对于逻辑层，不同页面的局部 <code>JS</code> 变量是隔离的，但全局的变量如 <code>global</code>，<code>globalThis</code> 如何隔离，本地缓存 <code>storage</code> 如何隔离？</p><h5 id="js-隔离" tabindex="-1"><code>JS</code> 隔离 <a class="header-anchor" href="#js-隔离" aria-label="Permalink to &quot;\`JS\` 隔离&quot;">​</a></h5><p>通过闭包作用域来模拟构建一个 <code>JS</code> 沙箱环境：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wx.getLocation;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;经过代理的wx对象及方法&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})(wxProxy);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wxProxy为模拟wx对象</span></span></code></pre></div><p>经调研发现，小程序微前端框架（<a href="https://guru.pages.woa.com/guide/" target="_blank" rel="noreferrer">guru</a>）的部分能力契合我们的述求，就不再重复造轮子。通过查阅源码发现，基于 <code>guru</code> 导出的 <code>@tencent/guru-runtime</code> <code>npm</code> 包加以开发适配，能够编译我们的业务代码并注入对应的运行时 <code>JS</code> 沙箱环境，打包后的页面 <code>JS</code> 代码为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGlobalThis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAppConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__esModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { value: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onLoad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../guru.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMicroApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p><code>guru.js</code> 为对应的 <code>runtime</code> 代码，各页面需要引入。业务代码被包裹在一个闭包环境中，全局变量 <code>wx、global、globalThis、App</code> 等均被代理，完成了 <code>JS</code> 隔离；</p><p><img src="`+t+`" alt="guru"></p><h5 id="css-隔离" tabindex="-1"><code>CSS</code> 隔离 <a class="header-anchor" href="#css-隔离" aria-label="Permalink to &quot;\`CSS\` 隔离&quot;">​</a></h5><p>独立分包里的页面 <code>CSS</code> 不会被主应用全局样式 <code>app.wxss</code> 影响，重点是普通分包的处理。经测试发现，在子包页面 <code>json</code> 配置 <code>styleIsolation:page-shared</code> 或 <code>page-apply-shared</code> 则可以隔离主包全局样式，故遍历各页面 <code>json</code> 添加该属性即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setCssSandBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appJsonPath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(source, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appJsonContent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appJsonPath, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appJson</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appJsonContent);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appJson);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shouldUpdate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (shouldUpdate) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fileContent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsonData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileContent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jsonData.styleIsolation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;page-shared&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file.contents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jsonData, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>根据当前业务场景，因为是独立子包交付，故无需处理路由隔离、应用间通信等，最终将以上 <code>sandbox</code> 功能封装为 <code>npm</code> 包 <code>@tencent/uma-sp-sandbox</code>，支持自定义配置小程序不同全局变量的代理，同时对项目代码零侵入，开发者无感知。后续持续迭代专注于子包隔离。</p><h4 id="npm-构建" tabindex="-1"><code>NPM</code> 构建 <a class="header-anchor" href="#npm-构建" aria-label="Permalink to &quot;\`NPM\` 构建&quot;">​</a></h4><p>子包需要闭环交付，故该模式下的 npm 构建路径需在子包内并被正确引用；同时构建后的 npm 也需要通过 <code>@tencent/guru-runtime</code> 添加沙箱环境并修正引用路径。</p><h3 id="服务层" tabindex="-1">服务层 <a class="header-anchor" href="#服务层" aria-label="Permalink to &quot;服务层&quot;">​</a></h3><p>代码路径：除接口 <code>mock</code> 在文件夹顶层目录外，其他均在 <code>sub-package/common</code></p><p>服务层与具体业务解耦，主要提供了以下能力：</p><h4 id="请求会话" tabindex="-1">请求会话 <a class="header-anchor" href="#请求会话" aria-label="Permalink to &quot;请求会话&quot;">​</a></h4><p>请求模块以 <code>flyjs</code> +自定义 <code>Http Engine</code> 为基础完成请求层的构建，同时设置请求/响应拦截器，如设置 <code>request header</code> ，统一处理错误码，登录重试等；</p><p>会话模块对登录授权等会话状态相关的管理。该模块会读取客户定开层里对相关登录态的获取，同时还支持请求重试，更新用户数据等会话相关的底层能力。同时使用<code>单任务队列机制</code>和<code>保险丝机制</code>保障相关业务接口如登录、重试等调用稳定：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  retrying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 初始化客户用户信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  initUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 优码登录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  umaLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 通用登录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">option</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 退出登录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  logout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 登录完成</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ready</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">option</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 刷新会话登录态</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 更新用户信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 即时获取最新用户信息，会请求刷新用户数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getNewUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 获取用户信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 获取token</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 调API更新个人信息（头像、昵称、手机号）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updateInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nickName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">phone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 是否会员，存在手机号即开通会员</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 登录时候后重试弹窗</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  retry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="安全验签" tabindex="-1">安全验签 <a class="header-anchor" href="#安全验签" aria-label="Permalink to &quot;安全验签&quot;">​</a></h4><p>引入优码验签 <code>npm</code> 包，用于预防 <code>crsf</code>，请求伪造、篡改、重放等，提高破解门槛，增强通信安全性；</p><p><img src="`+d+`" alt="验签"></p><h4 id="监控埋点" tabindex="-1">监控埋点 <a class="header-anchor" href="#监控埋点" aria-label="Permalink to &quot;监控埋点&quot;">​</a></h4><p>通过对接口调用、关键路径等进行埋点，方便定位查找问题；同时将获取到 <code>UV PV</code> 并上报到<a href="https://xiaoma.woa.com/" target="_blank" rel="noreferrer">小马 BI</a> 进行数据统计分析；</p><h4 id="接口-mock" tabindex="-1">接口 <code>mock</code> <a class="header-anchor" href="#接口-mock" aria-label="Permalink to &quot;接口 \`mock\`&quot;">​</a></h4><p>通过 <code>express+mockjs</code> 开启本地服务并注入模拟数据，通过 <code>whistle</code> 将本地服务代理到小程序实际请求的接口即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/userc/v1/user/core/jhLogin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;result|10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;id|+1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          account: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@email&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@cname&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;totalCount|10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p><img src="`+r+'" alt="接口mock"></p><h4 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h4><p>使用 <code>jest</code>+<code>miniprogram-simulate</code> 完成单元测试的用例编写执行，保证应用质量；</p><p><img src="'+E+'" alt="jest"></p><h4 id="工具能力" tabindex="-1">工具能力 <a class="header-anchor" href="#工具能力" aria-label="Permalink to &quot;工具能力&quot;">​</a></h4><p>包括一些常见的工具函数库及一些通用功能，如：</p><ul><li>状态机 <code>status</code></li><li>数据缓存 <code>storage</code></li><li>消息订阅 <code>event</code></li><li>上传、预加载等</li></ul><p>可根据项目实际需求进行删减；</p><h3 id="组件层" tabindex="-1">组件层 <a class="header-anchor" href="#组件层" aria-label="Permalink to &quot;组件层&quot;">​</a></h3><p>代码路径：<code>sub-package/components</code></p><p>组件层提供了一些各项目都会用到的常用的底层组件如弹窗 <code>modal</code>、<code>header</code> 标题栏、分页 <code>paging</code> 等，可以根据项目各自要求而进行统一的扩展定制，另外还有两个特殊的小程序页面组件：</p><h4 id="debug-页" tabindex="-1"><code>debug</code> 页 <a class="header-anchor" href="#debug-页" aria-label="Permalink to &quot;`debug` 页&quot;">​</a></h4><p><code>debug</code> 页用于前端相关的调试与测试。一般包含以下功能:</p><ul><li>当前用户信息、应用信息的展示，用于定位用户测试；</li><li>环境切换；</li><li>泳道切换；</li><li>测试企业切换；</li><li>清理功能；</li><li>自定义测试功能；</li></ul><p>通常在业务页面上某个角落设置连击 5 次进入 <code>debug</code> 页面进行调试。</p><p><img src="'+o+`" alt="debug页"></p><h4 id="扫码中转页" tabindex="-1">扫码中转页 <a class="header-anchor" href="#扫码中转页" aria-label="Permalink to &quot;扫码中转页&quot;">​</a></h4><p>扫码中转页为一个空白页，依赖客户微信管理后台里的扫普通链接二维码跳转小程序功能。当该功能配置后，扫带参码进入扫码中转页，中转页获取相关参数可以设置当前小程序的环境、泳道、企业等，并且立即跳转到指定页面或默认页面，小程序销毁时失效。可以方便的通过微信扫码完成各种 <code>case</code> 及多人同时测试的场景。</p><h3 id="业务层" tabindex="-1">业务层 <a class="header-anchor" href="#业务层" aria-label="Permalink to &quot;业务层&quot;">​</a></h3><p>上述的部分通常无需做代码逻辑调整，各客户的配置也都收敛在 <code>env.js</code> 里，而业务层则是不同客户主要的定开逻辑，这部分的开发是整个项目开发的核心，也是每一个参与的开发人员重点关注的地方。</p><p>其他层与业务层无耦合，意味着子包脚手架模板不仅仅只支持优码定制化业务（下文的优码业务层通用化剥离），而是可插拔式的支持任何其他业务，是一套可移植、可扩展的脚手架模板。</p><p>业务层其中主要包括 3 大块，客户 <code>SDK</code> 获取、业务逻辑，业务通用组件。</p><h4 id="客户-sdk-获取" tabindex="-1">客户 <code>SDK</code> 获取 <a class="header-anchor" href="#客户-sdk-获取" aria-label="Permalink to &quot;客户 \`SDK\` 获取&quot;">​</a></h4><p>作为子包交付，是无法拥有独立获取小程序用户登录态或其他需要解密数据的能力，所以需要用到客户主包提供的获取相关数据的方法。对于不同的客户，提供的方法也不尽相同，如有的客户小程序提供了专门的 <code>sdk</code> 方法供子包调用获取，而有些小程序则是直接将相关数据注入到子包页面等等，所以这部分需要针对各客户进行定制化的开发。</p><p>通用会话模块会调用定开层暴露的统一获取数据的方法，而定开业务层则在内部自行完成客户数据的获取，与服务层解耦；</p><p>定开层代码示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCustomUserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>通用服务层 <code>session</code> 代码示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNewUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCustomUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而在本地开发模式，在服务层（<code>SDK mock</code>）模块里则通过 <code>mock</code> 一份客户数据如登录等，并通过模拟方法来完整模拟客户 <code>sdk</code> 的接口类型，在定开业务层的调用保持与真实环境的一致性。</p><p>本地 <code>MOCK SDK</code> 代码示例：</p><p><code>app.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { JsSdk } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./mock/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsSdk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsSdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getSdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsSdk;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><code>mock/index.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mockdata, UserInfo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsSdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getUserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      UserInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mockdata.userInfo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { JsSdk };</span></span></code></pre></div><p>其中 <code>data.ts</code> 即为模拟客户数据。</p><h4 id="业务逻辑" tabindex="-1">业务逻辑 <a class="header-anchor" href="#业务逻辑" aria-label="Permalink to &quot;业务逻辑&quot;">​</a></h4><p>代码路径：<code>sub-package</code>/各页面模块</p><p>这部分是实际交付的定开业务，包含各定开小程序页面模块，完成客户定制化需求。其中用到的路径均为相对路径，防止合包引起的路径不一致的问题；</p><p>其中约定需要上传的静态资源存放在各自页面模块下的 <code>@cdn</code> 文件夹里，构建时会将所有 <code>@cdn</code> 文件夹里的资源合并到一个文件夹里，在流水线的时候会统一上传。</p><h4 id="业务通用组件" tabindex="-1">业务通用组件 <a class="header-anchor" href="#业务通用组件" aria-label="Permalink to &quot;业务通用组件&quot;">​</a></h4><p>代码路径：<code>sub-package/components/biz</code></p><p>本业务相关通用的一些定制组件，可由通用组件层扩展而来，为本项目定制化服务。如活动统一的规则弹窗，统一的活动列表组件等等；</p><h3 id="cli-工具" tabindex="-1">cli 工具 <a class="header-anchor" href="#cli-工具" aria-label="Permalink to &quot;cli 工具&quot;">​</a></h3><p><img src="`+c+'" alt="cli"></p><p>通过 <code>cli</code> 工具，可一键生成带有优码特定业务场景的子包脚手架模板或组件库等，同时可以配置是否子应用隔离，帮助开发者提升开发体验，让开发更聚焦于业务。</p><h2 id="优码业务层通用化剥离" tabindex="-1">优码业务层通用化剥离 <a class="header-anchor" href="#优码业务层通用化剥离" aria-label="Permalink to &quot;优码业务层通用化剥离&quot;">​</a></h2><p>基于企业交付业务的独特场景，而其中又以优码扫码业务模块功能交付居多，故对优码业务层进行通用化梳理并提取核心链路逻辑，用于快速开发支持优码业务。</p><p><img src="'+g+'" alt="业务层通用化"></p><p>通过对多个客户接入优码的业务主链路进行分析，得到以下主要链路模块：</p><ul><li>扫码链路（码着陆处理、活动匹配）</li><li>抽奖链路（抽奖逻辑、中奖状态）</li><li>领奖链路（领奖逻辑、奖品类型） <ul><li>奖品类型：劵码、实物、积分、红包</li><li>实名认证</li><li>收货地址</li></ul></li><li>个人中心（列表详情、二次领取）</li></ul><p>如图（扫码抽奖活动）：</p><p><img src="'+y+'" alt="ma"></p><p>将业务进行最核心的 <code>UI</code> 与逻辑抽离，得到包括通用 <code>API</code> 接口在内的完整链路的’页面与逻辑‘绑定的小程序页面模板，结合 <code>API</code> 返回将各边界条件都已通过了完备的处理。在实际开发中，开发者只需关注与标准链路的差异点，主要完成 <code>UI</code> 开发及新增或调整的功能，根据客户不同诉求进行二次开发即可；</p><p>相关的通用固定的业务相关的逻辑，如抽奖方法，抽奖弹窗等，即抽离为公共方法或组件直接复用。</p><p>这里为什么不将各页面业务功能高度抽象配置化呢？是因为各客户需求差异巨大，<code>UI</code> 风格迥异，将业务组件配置化反而会增加学习成本和开发成本，增加使用者心智负担，不如直接二次开发效率高。</p><p>未来根据优码通用化需求不断丰富其主链路功能模块，如加入积分商城模块、游戏互动模块等等。</p><h2 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-label="Permalink to &quot;流水线&quot;">​</a></h2><p><img src="'+F+'" alt="流水线"></p><p>根据业务定开子包交付的特殊场景，流水线结合模板 <code>npm scripts</code> 支持了以下能力：</p><ul><li>多企业：每新增一个客户，只需要新建一个 <code>task</code> 来录入客户对应项目相关信息（如 <code>appid</code>，<code>git</code> 项目地址等），后续只需运行即可不再做任何调整；</li><li>多环境：支持打包为 <code>QA</code>、<code>GREEN</code>、<code>PROD</code> 环境；</li><li>多模式：支持打包为整体模拟和生产子包；整体模拟则是包含 <code>mock</code> 数据在内测试小程序，用于和包前的开发、测试同学在本地的功能测试，而不需要依赖客户方的合包发布；产品子包则是最终交付给客户的子包模块，用于合入客户小程序。</li><li>代码审查：接入 <code>codecc</code> 完成代码审查，存在代码缺陷则禁止 MR；</li><li><code>CDN</code>上传：将静态资源统一上传到 <code>CDN</code>；</li><li>企微推送：构建动态信息同步并将构建后的子包发布到企微群；</li></ul><p><img src="'+A+'" alt="企微通知"></p><p>实现完成一条流水线，搞定所有客户的定开构建全链路支持，大幅度提高交付效率与正确性。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过脚手架模版的构建到前端工程化的实施，我们在以下几个方面取得了成果：</p><ul><li>新增定开子包脚手架模板及其对应的 <code>cli</code> 工具，使得开发者能够轻松地一键生成子包项目，同时支持普通分包和独立分包，帮助开发者提升开发体验，让开发更聚焦于业务；</li><li>采用分层设计的脚手架，使得开发者能将重心聚焦在业务层，无需关注其他功能，从而提高交付效率；</li><li>落地并实施统一的开发规范，通过在本地及远端都设有门禁检查，保障代码质量；</li><li>通过构建层接入子应用隔离，避免了在合包之后因全局污染冲突产生一些难以调试的 <code>BUG</code>；同时因其对代码无侵入，开发者在开发过程中无需刻意关注；</li><li>针对优码业务的核心链路通用化剥离复用，使开发者能够快速支持优码业务相关的客户定制化需求；</li><li>构建完善的自动化流水线，实现构建编译全链路优化，通过机器简化发布过程的重复劳动，通过流程保证发布的质量；</li></ul><p>整体脚手架模板结构较为简单，这是根据当前的定开交付形态来决定的。在实践中要避免过度设计从而增加了开发者使用的心智负担，反而增加了交付的复杂性。一切要以提高交付效率，保证交付质量为核心目标。</p><p>麻雀虽小五脏俱全，作为一个可移植、高扩展性的脚手架模版及其工程化的配套，未来交付中心开发组会根据实际应用及业务场景不断优化改善，继续提高开发体验及交付效率，保障交付质量。</p>',123)]))}const q=i(C,[["render",u]]);export{v as __pageData,q as default};
