import{_ as s,c as a,o as e,U as i}from"./chunks/framework.zbpA_oTj.js";const g=JSON.parse('{"title":"ast简介","description":"","frontmatter":{},"headers":[],"relativePath":"hexo/367.md","filePath":"hexo/367.md"}'),t={name:"hexo/367.md"},n=i(`<h1 id="ast简介" tabindex="-1">ast简介 <a class="header-anchor" href="#ast简介" aria-label="Permalink to &quot;ast简介&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p><code>抽象语法树（Abstract Syntax Tree，AST）</code>是源代码语法结构的一种抽象表示。它以<strong>树状的形式表现编程语言的语法结构</strong>，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。</p><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><p>优化变更代码，改变代码结构达到想要的结构（<code>webpack</code> 等），代码语法、风格的检查（<code>eslint</code>），代码的格式化，代码的高亮，代码错误提示，代码自动补全（<code>IDE</code>）等等。</p><h2 id="如何转换" tabindex="-1">如何转换 <a class="header-anchor" href="#如何转换" aria-label="Permalink to &quot;如何转换&quot;">​</a></h2><p>可通过一些优秀的 <code>javascript Parser</code> 解析器，来实现源码转换为语法树，更改语法树，生成新的语法树。</p><h3 id="源码-语法树" tabindex="-1">源码-&gt;语法树 <a class="header-anchor" href="#源码-语法树" aria-label="Permalink to &quot;源码-&gt;语法树&quot;">​</a></h3><p>一般浏览器会把 <code>js</code> 源码通过解析器转化为抽象语法树，再进一步转化为字节码或直接生成机器码。</p><p>每一个 <code>js</code> 引擎都会有自己的抽象语法树格式，<code>chrome</code> 的 <code>v8</code> 引擎，<code>firefox</code> 的 <code>SpiderMonkey</code> 引擎等等，业界标准为：<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API#Node_objects" target="_blank" rel="noreferrer">AST 对象文档</a>，中文类似<a href="http://developer.51cto.com/art/201611/521405.htm" target="_blank" rel="noreferrer">讲解</a></p><p>在线解析点<a href="https://astexplorer.net/" target="_blank" rel="noreferrer">这里</a></p><p>常用的 <code>parser</code> 有：<a href="https://esprima.org/" target="_blank" rel="noreferrer">esprima</a>，<code>traceur</code>，<code>acorn</code>( <code>webpack</code> 使用)，<code>shift</code></p><h3 id="遍历更新语法树" tabindex="-1">遍历更新语法树 <a class="header-anchor" href="#遍历更新语法树" aria-label="Permalink to &quot;遍历更新语法树&quot;">​</a></h3><p>常用的 <code>parser</code> 为：<a href="https://github.com/estools/estraverse" target="_blank" rel="noreferrer">estraverse</a></p><h3 id="语法树-新的源码" tabindex="-1">语法树-&gt;新的源码 <a class="header-anchor" href="#语法树-新的源码" aria-label="Permalink to &quot;语法树-&gt;新的源码&quot;">​</a></h3><p>常用的 <code>parser</code> 为：<a href="https://github.com/estools/escodegen" target="_blank" rel="noreferrer">escodegen</a></p><p>使用 <code>esprima</code>, <code>estraverse</code>, <code>escodegen</code> 三板斧可完成源码编译解析，另有包 <a href="https://github.com/benjamn/recast" target="_blank" rel="noreferrer">recast</a> 可完成这一系列操作。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-label="Permalink to &quot;实例&quot;">​</a></h2><h3 id="箭头函数转换成普通函数" tabindex="-1">箭头函数转换成普通函数 <a class="header-anchor" href="#箭头函数转换成普通函数" aria-label="Permalink to &quot;箭头函数转换成普通函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> esprima</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esprima&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> estraverse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;estraverse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> escodegen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;escodegen&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`var a = b=&gt;{console.log(123);}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> esprima.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">estraverse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  leave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (node.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ArrowFunctionExpression&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      node.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FunctionDeclaration&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> escodegen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tree);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// var a = function(b){console.log(123);}</span></span></code></pre></div><h3 id="babel-插件" tabindex="-1">babel 插件 <a class="header-anchor" href="#babel-插件" aria-label="Permalink to &quot;babel 插件&quot;">​</a></h3><p>待补充 <a href="https://segmentfault.com/a/1190000018753707" target="_blank" rel="noreferrer">参考</a></p><h3 id="vue-template-模板解析-ast" tabindex="-1">vue template 模板解析 AST <a class="header-anchor" href="#vue-template-模板解析-ast" aria-label="Permalink to &quot;vue template 模板解析 AST&quot;">​</a></h3><p>待补充 <a href="https://segmentfault.com/a/1190000015432258" target="_blank" rel="noreferrer">参考</a> <a href="https://blog.csdn.net/violetjack0808/article/details/79354852" target="_blank" rel="noreferrer">参考 2</a></p>`,24),r=[n];function h(l,p,k,o,d,c){return e(),a("div",null,r)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
