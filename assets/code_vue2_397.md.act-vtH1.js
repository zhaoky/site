import{_ as s,c as i,o as a,U as e}from"./chunks/framework.V_NCB61V.js";const g=JSON.parse('{"title":"源码笔记（六）：mount 阶段生成 vnode","description":"","frontmatter":{},"headers":[],"relativePath":"code/vue2/397.md","filePath":"code/vue2/397.md"}'),n={name:"code/vue2/397.md"},t=e(`<h1 id="源码笔记-六-mount-阶段生成-vnode" tabindex="-1">源码笔记（六）：mount 阶段生成 vnode <a class="header-anchor" href="#源码笔记-六-mount-阶段生成-vnode" aria-label="Permalink to &quot;源码笔记（六）：mount 阶段生成 vnode&quot;">​</a></h1><p>接上文，在触发生命周期钩子 <code>beforeMount</code> 后，执行：</p><h2 id="实例化-渲染-watcher" tabindex="-1">实例化 渲染 watcher <a class="header-anchor" href="#实例化-渲染-watcher" aria-label="Permalink to &quot;实例化 渲染 watcher&quot;">​</a></h2><p>然后根据 <code>config.performance</code> 及 <code>mark</code> 是否存在，得到不同的 <code>updateComponent</code>，此处为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), hydrating);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>然后实例化 <code>渲染 watcher</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Watcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  updateComponent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  noop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vm._isMounted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vm._isDestroyed) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeUpdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>渲染 watcher</code> 会触发 <code>render</code> 渲染 <code>vnode</code>，在渲染过程中，<code>get</code> 过程中，涉及到的所有变量都会添加此 <code>watcher</code> 作为订阅者。也就意味着在任一变量发生变化都会通知此 <code>watcher</code> 执行 <code>updateComponent</code> 方法。</p><p>前面已知，在实例化 <code>Watcher</code> 的过程中，会执行 <code>this.get -&gt; this.getter</code> 去获取当前 <code>value</code>。此时执行的 <code>this.getter</code> 即为 <code>updateComponent</code>。所以得知实例化 <code>渲染 watcher</code> 分两步：</p><ol><li>执行 <code>vm._render</code> 将 <code>render</code> 转化为 <code>vnode</code>，在 <code>render</code> 的过程中，读取到的所有变量都会触发对应的 <code>get</code> 将本 <code>渲染 watcher</code> 加入订阅，也就意味着在任一变量发生变化都会通知此 <code>渲染watcher</code> 执行 <code>updateComponent</code>；</li><li>执行 <code>vm._update</code> 将 得到的新 <code>vnode</code> 与旧 <code>vnode</code> 比较，最小差异的更新真实 <code>dom</code>。</li></ol><h2 id="执行-render-生成-vnode" tabindex="-1">执行 render 生成 vnode <a class="header-anchor" href="#执行-render-生成-vnode" aria-label="Permalink to &quot;执行 render 生成 vnode&quot;">​</a></h2><p>先执行 <code>vm._render</code>，内部执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_parentVnode) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.$scopedSlots </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> normalizeScopedSlots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果是子组件实例，即 <code>_parentVnode</code> 为父组件 <code>vnode</code>，并将其赋给 <code>vm.$node</code>。然后通过 <code>normalizeScopedSlots</code> 处理了作用域插槽相关。然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vnode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm._renderProxy, vm.$createElement); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//vm._renderProxy 在 initProxy 定义，vm.$createElement 在 initRender 定义</span></span></code></pre></div><p><code>render</code> 为渲染函数，此方法渲染生成返回一个 <strong>virtual dom</strong>。</p><h3 id="virtual-dom" tabindex="-1">Virtual DOM <a class="header-anchor" href="#virtual-dom" aria-label="Permalink to &quot;Virtual DOM&quot;">​</a></h3><p><code>Virtual DOM</code> 建立在 <code>DOM</code> 之上，是基于 <code>DOM</code> 的一层抽象，实际可理解为用更轻量的纯 <code>JavaScript</code> 对象（树）描述 <code>DOM</code>（树），通过对比 <code>Virtual DOM</code>，只更新需要更新的 <code>DOM</code> 节点。</p><p>通常情况下，找到两棵任意的树之间最小修改的时间复杂度是 <code>O(n^3)</code>。<code>Virtual DOM</code> 根据前端实际场景，以深度优先，只进行同级比较，复杂度为 <code>O(n)</code>。</p><p><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noreferrer">snabbdom</a> 就是 <code>Virtual DOM</code> 的一个简洁实现。</p><h3 id="分析-render-函数" tabindex="-1">分析 <code>render</code> 函数 <a class="header-anchor" href="#分析-render-函数" aria-label="Permalink to &quot;分析 \`render\` 函数&quot;">​</a></h3><p><code>demo</code> 编译出的 <code>render</code> 函数为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anonymous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { attrs: { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bpp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Bpp&gt;&lt;/Bpp&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { on: { click: plus } }, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;info.name:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(info.name) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;，计算属性:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compute))]), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;div v-on:click=&quot;plus&quot;&gt;info.name:{{info.name}}，计算属性:{{compute}}&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { attrs: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num: info.age } }), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;App name=&quot;one&quot; v-bind:num=&quot;info.age&quot;&gt;&lt;/App&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { on: { click: hide } }, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;====点击让第二个App组件卸载====&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;div v-on:click=&quot;hide&quot;&gt;====点击让第二个App组件卸载====&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isShow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { attrs: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;App name=&quot;two&quot; v-if=&quot;isShow&quot;&gt;&lt;/App&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>以上共 9 个子节点，具体的执行 <code>render</code> 中过程不具体分析，只说明其中的一些要点：</p><ul><li><code>_c</code> 返回一个普通 <code>vnode</code>，<code>_v</code> 返回一个文本 <code>vnode</code>，<code>_e</code> 返回一个注释 <code>vnode</code>， <code>_s</code> 返回一个字符串， <code>_l</code> 返回一个 <code>vnode</code> 数组 ， <code>_u</code> 返回 <code>scopedSlots</code> 的 <code>key</code> 和 <code>fn</code> 的键值对，<code>_t</code> 返回 <code>scopedSlot</code> 渲染的插槽 <code>vnode</code>。</li><li>其中读取每一个变量及 <code>_c，_v，_s，_l</code> 等挂载在 <code>vm</code> 下面的方法都会触发 <code>hasHandler</code> 检查。</li><li><strong>读取到 <code>info</code> 等 <code>data</code> 内的属性时触发监听会把这个 <code>watcher</code> 加到各自的 <code>dep</code> 订阅列表里面，并获得最新值。</strong></li><li><code>_s</code> 即 <code>toString</code> 执行 <code>JSON.stringify</code> 得到字符串的过程中，如果变量是对象则会触发该变量及其变量里的每一个属性的 <code>reactiveGetter</code>，即将 <code>渲染 watcher</code> 加到各属性的订阅列表。</li><li>读取到 <code>compute</code> 等计算属性触发监听走的 <code>get</code> 方法为 <code>computedGetter</code>，里面取得他自己之前的 <code>watcher</code>，然后 <code>evaluate</code> 惰性求值执行 <code>compute</code> 函数，执行过程中读取了 <code>info.age</code>，所以将他的 <code>watcher</code> 订阅到 <code>info.age</code> 的订阅列表里，同时也取得了最新的 <code>compute</code> 的值。所以在 <code>info.age</code> 变化时，就会通知该 <code>计算 wather</code> 触发更新即设置标识位 <code>dirty</code> 为 <code>true</code>，继而在通知 <code>渲染 watcher</code> 触发更新时获取 <code>compute</code> 取值时重新计算。</li><li>静态节点的构建会调用 <code>_m</code> 即 <code>renderStatic</code> 方法，根据传入的索引去执行对应的 <code>render</code> 得到 <code>vnode</code>，并增加属性 <code>isStatic,key,isOnce</code>。</li><li>执行到数组渲染方法 <code>_l</code>即 <code>renderList</code>，在方法内部循环对数组执行对应的 <code>render</code> 方法（<code>_l</code> 的第二个方法参数）,最终返回 <code>[VNode, VNode, VNode, _isVList: true]</code>，其中每一项 <code>vnode</code> 下有 <code>key</code> 值和 <code>vnode.data</code> 里多了一个 <code>key</code> 属性。数组会在最后的 <code>_c</code> 方法里 <code>normalizeChildren</code> 拍平。</li><li>读取到 <code>&lt;App&gt;,&lt;Bpp&gt;</code> 等同步异步组件，组件生成 <code>vnode</code> 下面单独说明。</li></ul><h2 id="render-同步组件生成-vnode" tabindex="-1">render 同步组件生成 vnode <a class="header-anchor" href="#render-同步组件生成-vnode" aria-label="Permalink to &quot;render 同步组件生成 vnode&quot;">​</a></h2><p>执行 <code>_c(&#39;app&#39;)-&gt;createElement-&gt;_createElement</code>，在 <code>_createElement</code> 里，因为组件名不为保留标签（<code>config.isReservedTag(tag)</code>），所以执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.pre) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isDef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((Ctor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveAsset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.$options, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;components&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tag)))) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// component</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vnode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Ctor, data, context, children, tag);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span></code></pre></div><p>其中 <code>children</code> 为 插槽 <code>Vnode</code>。</p><p>执行 <code>resolveAsset</code> 方法获取该组件在 <code>$options.components</code> 里对应的的组件上下文对象对应的经过 <code>webpack</code> 编译后包含 <code>render</code> 的组件选项对象，赋给 <code>Ctor</code>。</p><h3 id="构造子类构造函数" tabindex="-1">构造子类构造函数 <a class="header-anchor" href="#构造子类构造函数" aria-label="Permalink to &quot;构造子类构造函数&quot;">​</a></h3><p>然后执行 <code>createComponent</code> 方法，内部执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Ctor)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ctor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseCtor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Ctor);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>baseCtor</code> 即为 <code>Vue</code> 构造函数，<code>extend</code> 即为 <code>Vue.extend</code>。使用基础 <code>Vue</code> 构造器，创建一个“子类”。参数是组件选项对象。</p><p><code>extend</code> 里先读取缓存 <code>Ctor</code> 下的 <code>_Ctor</code>，如果没有，将在构造构造函数结束后将 <code>Ctor</code> 即构造函数存入缓存。 这样在引入多个相同组件的时候，不用重复构造组件的构造函数了。</p><p><code>extend</code> 里通过 <code>validateComponentName</code> 验证组件名之后，继续执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Sub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Sub;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Sub.cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Sub.options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mergeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Super.options, extendOptions);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Sub[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;super&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Super;</span></span></code></pre></div><p>定义了子类构造函数 <code>Sub</code>，并在 <code>Sub</code> 上设置了相关属性，建立了父组件和本组件之类的继承关系。</p><p>如果组件的 <code>options</code> 里有 <code>props</code> 及 <code>computed</code>，则添加监听挂载到 <code>Sub</code> 的原型即父组件的原型上。 最终返回 <code>Sub</code> 赋给 <code>Ctor</code>，<code>Vue.extend</code> 执行结束。<strong>Ctor 即为 Vue component 子组件构造函数。</strong></p><h3 id="处理属性及安装组件钩子函数" tabindex="-1">处理属性及安装组件钩子函数 <a class="header-anchor" href="#处理属性及安装组件钩子函数" aria-label="Permalink to &quot;处理属性及安装组件钩子函数&quot;">​</a></h3><p>然后依次判断是否是异步组件 -&gt; 处理 <code>options</code>（通过 <code>resolveConstructorOptions</code>）-&gt; 提取 <code>props</code>（通过 <code>extractPropsFromVNodeData</code>）-&gt; 判断是否是函数组件 -&gt; 提取 <code>listeners</code> 事件 -&gt; 判断是否是 <code>keepAlive/transition</code> 组件，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">installComponentHooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span></code></pre></div><p>安装合并 <code>data</code>（属性）里的组件钩子函数： <code>hooks：init，prepatch，insert，destroy</code>。</p><h3 id="实例化-vnode" tabindex="-1">实例化 vnode <a class="header-anchor" href="#实例化-vnode" aria-label="Permalink to &quot;实例化 vnode&quot;">​</a></h3><p>然后一切准备工作结束后，调用 <code>new VNode</code> 方法生成组件 <code>vnode</code>（其中前面生成的 <code>Ctor</code> 挂载在 <code>vnode.componentOptions</code> 上，并且组件的 <code>vnode</code> 是没有 <code>children</code> 的，插槽 <code>children</code> 保存在了 <code>componentOptions</code> 上 ）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-component-1-app&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  elm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Vue {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_isVue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_renderProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Proxy, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Vue, …}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fnContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fnOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fnScopeId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">propsData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Ctor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  raw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isRootInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isCloned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  asyncFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  asyncMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isAsyncPlaceholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最终通过 <code>vm._render()</code> 得到整个 <code>vnode</code>，到此，通过 <code>render</code> 构建 <code>vnode</code> 过程结束。</p><h2 id="render-异步组件生成-vnode" tabindex="-1">render 异步组件生成 vnode <a class="header-anchor" href="#render-异步组件生成-vnode" aria-label="Permalink to &quot;render 异步组件生成 vnode&quot;">​</a></h2><h3 id="第一阶段" tabindex="-1">第一阶段 <a class="header-anchor" href="#第一阶段" aria-label="Permalink to &quot;第一阶段&quot;">​</a></h3><p>同同步组件一致，得到 <code>Ctor</code> 为经 <code>webpack</code> 编译后的 <code>Bpp</code> 函数（而同步组件是一个组件选项对象）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __webpack_require__.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*! import() */</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__webpack_require__.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*! ./bpp.vue */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./src/bpp.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>然后进入 <code>createComponent</code>，跳过构造子类构造函数，执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUndef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Ctor.cid)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  asyncFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Ctor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Ctor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(asyncFactory, baseCtor);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="resolveasynccomponent" tabindex="-1">resolveAsyncComponent <a class="header-anchor" href="#resolveasynccomponent" aria-label="Permalink to &quot;resolveAsyncComponent&quot;">​</a></h4><p><code>resolveAsyncComponent</code> 里，如果提供的异步组件选项是对象的形式，则先处理 <code>error</code> 等各配置。然后将 <code>currentRenderingInstance</code>(即 <code>vue</code> 实例) 赋到 <code>Bpp</code> 函数的 <code>owners</code> 属性上并定义 <code>forceRender，resolve，reject</code> 等异步函数钩子，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve, reject);</span></span></code></pre></div><p><code>res</code> 即为一个 <code>promise</code>，该 <code>promise</code> 会在 <code>__webpack_require__.bind(null, /*! ./bpp.vue */ &#39;./src/bpp.vue&#39;)</code> 执行完成后的回调里执行。然后对结果 <code>res</code> 做了一些判断处理，本 <code>demo</code> 执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve, reject);</span></span></code></pre></div><p>意味着当 <code>bpp.vue</code> 加载完成后，就会来执行之前定义的 <code>resolve，reject</code> 回调。然后返回空，<code>resolveAsyncComponent</code> 执行结束。</p><p>回到 <code>createComponent</code>，将 <code>resolveAsyncComponent</code> 结果赋给 <code>Ctor</code>，因为为空，则返回：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createAsyncPlaceholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(asyncFactory, data, context, children, tag);</span></span></code></pre></div><p>调用 <code>createEmptyVNode</code> 返回一个占位的空 <code>vnode</code>（注释类型）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  elm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fnContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fnOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fnScopeId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  raw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isRootInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isCloned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  asyncFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {…}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  asyncMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Vue, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bpp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  isAsyncPlaceholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>异步组件的 <code>vnode</code> 创建第一阶段结束。</p><h3 id="第二阶段" tabindex="-1">第二阶段 <a class="header-anchor" href="#第二阶段" aria-label="Permalink to &quot;第二阶段&quot;">​</a></h3><p>引入异步 <code>bpp.vue</code> 后，执行 <code>resolve</code> 回调：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">factory.resolved </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ensureCtor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res, baseCtor);</span></span></code></pre></div><p>其中 <code>res</code> 为 <code>module.exports</code>，<code>baseCtor</code> 为 <code>Vue</code> 构造函数。<code>ensureCtor</code> 里先取得 <code>module.exports.default</code>，然后同同步组件一致，执行构造子类构造函数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(comp) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(comp) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comp;</span></span></code></pre></div><p>将构造后的子类构造函数 <code>Vue.component</code> 赋给 <code>factory.resolved</code>，执行 <code>forceRender</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> owners.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  owners[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$forceUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>owners[]</code> 为 <code>vue</code> 实例，对每一个拥有该组件的父组件执行 <code>$forceUpdate</code> 强制更新。</p><h4 id="forceupdate" tabindex="-1"><code>$forceUpdate</code> <a class="header-anchor" href="#forceupdate" aria-label="Permalink to &quot;\`$forceUpdate\`&quot;">​</a></h4><p>迫使 <code>Vue</code> 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件（不影响作用域插槽），而不是所有子组件。</p><p><code>$forceUpdate</code> 方法里执行：<code>vm._watcher.update()</code> 进入渲染 <code>watcher</code> 更新流程。在触发父组件 <code>vue</code> 钩子 <code>beforeUpdate</code> 后，执行 <code>vm._update(vm._render(), hydrating)</code>（中间流程在本系列后续篇章详解）</p><p>此时，再次调用 <code>vm._render</code>，其他节点渲染成 <code>vnode</code> 不变，而对于该异步节点渲染，方法里再次进入 <code>resolveAsyncComponent</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory.resolved)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.resolved;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>与第一次不一样的是，本次 <code>factory.resolved</code> 有值为子类构造函数 <code>Vue.component</code>，所以直接返回，就不走之前<code>resolveAsyncComponent</code> 方法里剩下的逻辑了，然后在 <code>createComponent</code> 里就跟同步组件路线一致，生成 <code>vnode</code>。</p><p>然后会执行 <code>vm._update</code> 方法更新真实 <code>dom</code>，异步 <code>vnode</code> 会通过 <code>createElm</code> 创建一个新的组件对应的真实 <code>dom</code>，所以会依次触发 <code>async Bpp beforeCreate-&gt;async Bpp created-&gt;async Bpp beforeMount-&gt;async Bpp mounted</code>,其中 <code>async Bpp mounted</code> 钩子在父组件的 <code>patch</code> 里 <code>invokeInsertHook</code> 中触发。</p><p>另外，异步组件的强制更新会引起父组件里的其他子组件执行 <code>updateChildComponent</code>，如果该子组件判断有普通插槽或动态插槽（不包含具名插槽），则会强行渲染包含插槽的子组件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (needsForceUpdate) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.$slots </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveSlots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderChildren, parentVnode.context);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$forceUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后在 <code>flushSchedulerQueue</code> 里执行 <code>callUpdatedHooks(updatedQueue)</code> 触发父组件 <code>vue updated</code> 钩子，异步组件加载完成。</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><ol><li>本章介绍了 <code>vue</code> 执行的 <code>Mount</code> 阶段中的通过 <code>render</code> 生成 <code>vnode</code> 部分。</li><li>在执行实例化 <code>渲染 watcher</code> 时，触发 <code>render</code> 生成 <code>vnode</code>。</li><li>分析了普通节点 <code>render</code>、同步/异步组件 <code>render</code> 的过程。</li></ol>`,84),h=[t];function p(l,k,d,o,c,r){return a(),i("div",null,h)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
