import{_ as s,c as i,o as a,U as n}from"./chunks/framework.LCBkioTP.js";const g=JSON.parse('{"title":"全面分析总结JS内存模型（转）","description":"","frontmatter":{},"headers":[],"relativePath":"misc/402.md","filePath":"misc/402.md"}'),e={name:"misc/402.md"},t=n(`<h1 id="全面分析总结js内存模型-转" tabindex="-1">全面分析总结JS内存模型（转） <a class="header-anchor" href="#全面分析总结js内存模型-转" aria-label="Permalink to &quot;全面分析总结JS内存模型（转）&quot;">​</a></h1><blockquote><p>原文链接：<code>https://juejin.im/post/5e6a1f406fb9a07cae13781e</code></p></blockquote><h2 id="数据类型与内存" tabindex="-1">数据类型与内存 <a class="header-anchor" href="#数据类型与内存" aria-label="Permalink to &quot;数据类型与内存&quot;">​</a></h2><h3 id="数据类型分类" tabindex="-1">数据类型分类 <a class="header-anchor" href="#数据类型分类" aria-label="Permalink to &quot;数据类型分类&quot;">​</a></h3><p>主要分为两大类：<strong>基本数据类型、复杂数据类型</strong>，详细分类如下。</p><ul><li>基本数据类型: <code>String、Number、Boolean、Null、Undefined、Symbol</code></li><li>复杂数据类型: <code>Object 以及所有继承自 Object 的类型</code></li></ul><p>对于不同的数据类型有不同的内存区域存储数据，基本数据类型直接存储在栈内存，复杂数据类型存储在堆内存。</p><h3 id="内存分类" tabindex="-1">内存分类 <a class="header-anchor" href="#内存分类" aria-label="Permalink to &quot;内存分类&quot;">​</a></h3><blockquote><p>JS 中的内存分类与 JS 引擎有关，在浏览中一般是 V8 引擎；要进行内存区分主要是为了进行垃圾回收，比如在 V8 的垃圾回收机制中会根据新生代、老生代内存采用不同回收算法来保证垃圾回收效率。</p></blockquote><p>JS 内存空间分为<strong>栈（stack）内存</strong>和<strong>堆（heap）内存</strong>，栈内存是<strong>栈结构存储基本数据类型和指向堆内存的指针</strong>，堆内存<strong>存储复杂数据类型</strong>。</p><h2 id="变量声明与赋值" tabindex="-1">变量声明与赋值 <a class="header-anchor" href="#变量声明与赋值" aria-label="Permalink to &quot;变量声明与赋值&quot;">​</a></h2><h3 id="核心点总结" tabindex="-1">核心点总结 <a class="header-anchor" href="#核心点总结" aria-label="Permalink to &quot;核心点总结&quot;">​</a></h3><ul><li>变量声明的本质是变量名与栈内存地址进行绑定，不直接与堆内存进行绑定。</li><li>声明的基本数据类型会将值存储在栈内存中，声明的复杂数据类型会将值存储在堆内存中并将其在堆中的内存地址作为值存到栈内存中。</li><li>const 声明常量本质是指的是声明的变量名所指向的栈内存地址不可改变，但是栈中对应的值可以改变。</li><li>基本数据类型赋值是在栈内存中申请新的内存区域保存值并将其指向的内存地址绑定到原有变量上。</li><li>复杂数据类型赋值是在堆内存中申请新的内存区域保存值并将其指向的内存地址作为值在栈内存中申请新的内存区域保存将其在栈中的内存地址绑定到变量上。</li></ul><h3 id="详解变量声明与赋值" tabindex="-1">详解变量声明与赋值 <a class="header-anchor" href="#详解变量声明与赋值" aria-label="Permalink to &quot;详解变量声明与赋值&quot;">​</a></h3><h4 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>基础数据类型直接将值存储在栈内存中，变量绑定到值在栈中对应的地址。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index;</span></span></code></pre></div><p>声明另一个变量 <code>_index</code> 并赋值为 index，其实是将 <code>_index</code> 和 <code>index</code> 变量绑定到 <code>index</code> 指向的内存地址。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>修改变量 <code>index</code> 的值为基本数据类型，其实是在栈内存中分配内存存储值然后将得到的内存地址绑定到变量 <code>index</code>。</p><h4 id="复杂数据类型" tabindex="-1">复杂数据类型 <a class="header-anchor" href="#复杂数据类型" aria-label="Permalink to &quot;复杂数据类型&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> students </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span></code></pre></div><p>复杂数据类型在声明时是在堆内存上分配内存空间存储其值，将分配的堆内存空间地址作为值存储在栈内存上，变量直接绑定的是栈上内存地址。</p><p>通过引用来修改复杂数据</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _students </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> students;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_students.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p><code>_status = students</code> 赋值语句只是将两个变量指向同一个栈内存地址，<code>push()</code> 语句将在堆内存中分配新空间存储新的数组并将其在堆内存的地址存储到栈中。</p><h4 id="更复杂的例子" tabindex="-1">更复杂的例子 <a class="header-anchor" href="#更复杂的例子" aria-label="Permalink to &quot;更复杂的例子&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [obj];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>[obj]</code>属于复杂类型中引用复杂类型是通过指针引用处理，虽然通过 <code>obj=null</code> 来清除了 <code>obj</code> 对于对象 <code>{index:&#39;小明&#39;}</code> 的绑定，但是 <code>arr</code> 对该对象任然存在引用。</p><h3 id="详解常量声明与赋值" tabindex="-1">详解常量声明与赋值 <a class="header-anchor" href="#详解常量声明与赋值" aria-label="Permalink to &quot;详解常量声明与赋值&quot;">​</a></h3><p>声明基本数据类型为常量过程与基本数据类型的声明过程相同</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Assignment to constant variable.</span></span></code></pre></div><p>对声明为基本数据类型的常量进行赋值会发生结果</p><p>在将 <code>index</code> 变量绑定到新产生的内存地址时报错：不允许修改常量绑定的内存地址。</p><p>声明复杂数据类型为常量过程与基本数据类型的声明过程相同。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">students </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小红&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }];</span></span></code></pre></div><p>对声明为复杂数据类型的常量进行赋值会产生如下结果</p><p>在将 <code>students</code> 变量绑定到新产生的内存地址时报错：不允许修改常量绑定的内存地址。</p><h3 id="深复制与浅复制" tabindex="-1">深复制与浅复制 <a class="header-anchor" href="#深复制与浅复制" aria-label="Permalink to &quot;深复制与浅复制&quot;">​</a></h3><blockquote><p>上面说的复杂数据类型通过指针指向了同一块堆内存空间，深、浅复制主要区别就在于复制值的时候是否新分配堆内存空间来保存原值的拷贝。</p></blockquote><p>对于对象或数组类型，当我们将 a 赋值给 b，然后更改 b 中的属性，a 也会随着变化。 也就是说 a 和 b 指向了同一块内存，所以修改其中任意的值，另一个值都会随之变化，这就是 <strong>浅复制（拷贝）</strong>。</p><p><strong>深复制（拷贝）</strong> 则是在上述 a 赋值给 b 过程分配了新堆内存空间来存储拷贝的值，同时在存在复杂数据类型的嵌套属性（<strong>递归遍历</strong>）也要用同样方式处理，最后复制出来的新数据对象下的任意层级的复杂对象都有新的堆内存存储相应的值。</p><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><p>有内存就必然有 <strong>垃圾回收（GC）</strong>，JS 中栈内存多数是在函数执行时使用（根据函数调用顺序也叫做<strong>调用栈</strong>），函数执行完后即开始栈内存的垃圾回收。堆内存由于存在多个栈内存中的指针指向它以及堆内存较大等原因，需要采用特定的垃圾回收算法处理。</p><blockquote><p>垃圾回收的关键在于如何判断内存已经不再使用然后将其释放掉</p></blockquote><h3 id="引用计数算法" tabindex="-1">引用计数算法 <a class="header-anchor" href="#引用计数算法" aria-label="Permalink to &quot;引用计数算法&quot;">​</a></h3><p>主要是 IE 等旧浏览器在采用，通过计数器分析变量的引用次数，清除没有引用到的变量。对于<strong>存在循环引用的情况则无法处理</strong>，比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  o1.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  o2.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Cycle reference!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>其中 o1 引用了 o2，o2 引用了 o1，在 cycle 函数执行完 o1，o2 都没有再次引用到，但是引用计数算法判断两者都存在引用。</p><h3 id="scavenge-算法" tabindex="-1">Scavenge 算法 <a class="header-anchor" href="#scavenge-算法" aria-label="Permalink to &quot;Scavenge 算法&quot;">​</a></h3><p>用于 V8 中新生代内存，将新生代内存一分为二：From 和 To，在 From 与 To 之间转换的过程中完成垃圾回收。</p><h3 id="标记清除算法" tabindex="-1">标记清除算法 <a class="header-anchor" href="#标记清除算法" aria-label="Permalink to &quot;标记清除算法&quot;">​</a></h3><p>早期 V8 中堆内存采用的一种清除算法，全局扫描堆内存找出未使用到的对象进行标记并清除，由于未进行内存整理会存在内存碎片。</p><h3 id="标记整理算法" tabindex="-1">标记整理算法 <a class="header-anchor" href="#标记整理算法" aria-label="Permalink to &quot;标记整理算法&quot;">​</a></h3><p>全局扫描堆内存找出未使用到的对象边整理边清除，解决了标记清除算法导致的内存碎片问题。</p><h3 id="增量式清除、整理" tabindex="-1">增量式清除、整理 <a class="header-anchor" href="#增量式清除、整理" aria-label="Permalink to &quot;增量式清除、整理&quot;">​</a></h3><p>堆内存大小一般较大，在采用前几种算法进行垃圾回收时需要扫描全堆，导致 JS 执行逻辑长时间暂停。增量式清除、整理是将标记清除或标记整理拆分为一个步进，轮流执行 JS 逻辑和一个步进，最大程度较少 JS 执行逻辑暂停时间。</p><h3 id="实例分析" tabindex="-1">实例分析 <a class="header-anchor" href="#实例分析" aria-label="Permalink to &quot;实例分析&quot;">​</a></h3><p>以在浏览器控制台运行下面这段代码为例（暂时不考虑 ES6 语法兼容性）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array);</span></span></code></pre></div><h4 id="变量声明-依次执行" tabindex="-1">变量声明（依次执行） <a class="header-anchor" href="#变量声明-依次执行" aria-label="Permalink to &quot;变量声明（依次执行）&quot;">​</a></h4><p>依次执行：堆内存储函数 fn、栈内存存储常量整数 index、堆内存存储数组 array</p><h4 id="调用函数-函数调用栈" tabindex="-1">调用函数（函数调用栈） <a class="header-anchor" href="#调用函数-函数调用栈" aria-label="Permalink to &quot;调用函数（函数调用栈）&quot;">​</a></h4><p>依次执行：变量 <code>arr、_arr</code> 指向数组 array、存储 join 方法返回的字符串到栈内存</p><h4 id="清除函数调用栈" tabindex="-1">清除函数调用栈 <a class="header-anchor" href="#清除函数调用栈" aria-label="Permalink to &quot;清除函数调用栈&quot;">​</a></h4><p>函数调用栈中的变量 <code>arr、_arr</code> 属于函数作用域，此时已经不可访问将被清除。</p><h4 id="清除堆栈内存" tabindex="-1">清除堆栈内存 <a class="header-anchor" href="#清除堆栈内存" aria-label="Permalink to &quot;清除堆栈内存&quot;">​</a></h4><p>整个 JS 逻辑执行完成，函数 fn、常量 index、数组 array、函数 fn 返回的字符串都将会清除。</p><blockquote><p>若在浏览器控制台中，执行完上述 JS 逻辑并未退出控制台，上述清除堆栈内存将在关闭控制台后执行。</p></blockquote><h2 id="常见问题分析" tabindex="-1">常见问题分析 <a class="header-anchor" href="#常见问题分析" aria-label="Permalink to &quot;常见问题分析&quot;">​</a></h2><h3 id="闭包导致内存泄露" tabindex="-1">闭包导致内存泄露 <a class="header-anchor" href="#闭包导致内存泄露" aria-label="Permalink to &quot;闭包导致内存泄露&quot;">​</a></h3><p>闭包就是通过返回一个函数间接地使外部有机会访问到函数内部的变量，扩展了 JS 中函数作用域的范围。</p><p>创建闭包方法如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { index: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时 obj2 就指向了上面定义的 obj</span></span></code></pre></div><p>下面用法会导致内存泄露：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回的函数绑定至了全局，没有主动清除</span></span></code></pre></div><p>generateFn 生成了一个引用 obj 的函数，同时将其绑定至了全局对象 window，导致 fn 不会被回收，而 fn 引用了 obj 使 obj 也不会被回收，于是产生了内存泄露。</p><h3 id="weakset、weakmap-的弱引用" tabindex="-1">WeakSet、WeakMap 的弱引用 <a class="header-anchor" href="#weakset、weakmap-的弱引用" aria-label="Permalink to &quot;WeakSet、WeakMap 的弱引用&quot;">​</a></h3><p>WeakSet 和 WeakMap 是 ES6 中两种新的数据结构，它们对于值的引用都<strong>不计入垃圾回收机制</strong>。WeakSet 只能存储不重复的对象，WeakMap 只能以对象为 key 来存储 key-value 对。对应对象在外部变为不可访问时，其对应的存储记录也将自行丢失。</p><h4 id="weakmap-分析" tabindex="-1">WeakMap 分析 <a class="header-anchor" href="#weakmap-分析" aria-label="Permalink to &quot;WeakMap 分析&quot;">​</a></h4><p>通过分析下面这段代码来说明其弱引用的特性。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { index: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newWeakSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除 obj 使在进行 GC 时清除{ index: 0 }对象</span></span></code></pre></div><p>将 obj 对象添加进 WeakSet 实例中，此时可以通过 obj 和 vs 变量来访问到 obj 对象，通过 obj=null 清除对象，此时 vs 中的 obj 对象的引用也会<strong>自动清除</strong>。</p><p>在 GC 完成之后（这里直接 console.log 打印还是可以看到 obj 对象的，因为 GC 没有完成），可以看到 vs 的 items 是空的。</p><p>另外，在研读 React 源码的过程中发现其中 DOMEventListenerMap.js 中有对 WeakMap 实际应用，下篇文章将会深入研究一下 WeakMap、WeakSet 等实际的应用。</p>`,87),h=[t];function l(p,k,d,r,o,E){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{g as __pageData,y as default};
