import{_ as s,c as i,o as a,U as l}from"./chunks/framework.UL-wCBb3.js";const g=JSON.parse('{"title":"flex布局总结","description":"","frontmatter":{},"headers":[],"relativePath":"exp/203.md","filePath":"exp/203.md"}'),e={name:"exp/203.md"},n=l(`<h1 id="flex布局总结" tabindex="-1">flex布局总结 <a class="header-anchor" href="#flex布局总结" aria-label="Permalink to &quot;flex布局总结&quot;">​</a></h1><p>布局的传统解决方案，基于盒状模型，依赖 <code>display 属性 + position 属性 + float 属性</code>。</p><h4 id="什么是-flex-布局" tabindex="-1">什么是 flex 布局 <a class="header-anchor" href="#什么是-flex-布局" aria-label="Permalink to &quot;什么是 flex 布局&quot;">​</a></h4><p><code>Flex</code>（<code>Flexible Box</code>），即为&quot;弹性布局&quot;。设为 <code>Flex</code> 布局以后，子元素的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Safari */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* inline元素 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="容器的属性" tabindex="-1">容器的属性 <a class="header-anchor" href="#容器的属性" aria-label="Permalink to &quot;容器的属性&quot;">​</a></h4><p>以下属性设置在 <code>flex</code> 布局中的父元素（即设有 <code>display:flex</code> 的元素），用来控制内部子元素的行为。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(默) | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">row-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">column-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(默) | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wrap-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;flex-direction&gt; &lt;flex-wrap&gt;;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(默) | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">baseline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(默);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(默);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>flex-direction</code>: 子元素的排列方向。 <ul><li><code>row</code>: 水平方向，起点在左端。</li><li><code>row-reverse</code>: 水平方向，起点在右端。</li><li><code>column</code>: 垂直方向，起点在上沿。</li><li><code>column-reverse</code>: 垂直方向，起点在下沿。</li></ul></li><li><code>flex-wrap</code>: 如果子元素一条线排不下，如何换行。 <ul><li><code>nowrap</code>: 不换行。</li><li><code>wrap</code>: 换行，第一行在上方。</li><li><code>wrap-reverse</code>: 换行，第一行在下方。</li></ul></li><li><code>flex-flow</code>: <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写形式。</li><li><code>justify-content</code>: 子元素在一条横线上的对齐方式。 <ul><li><code>flex-start</code>: 左对齐。</li><li><code>flex-end</code>: 右对齐。</li><li><code>center</code>: 居中。</li><li><code>space-between</code>: 两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>: 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li><li><code>align-items</code>: 每个子元素在垂直方向上的对齐方式。 <ul><li><code>flex-start</code>: 对齐顶部。</li><li><code>flex-end</code>: 对齐底部。</li><li><code>center</code>: 垂直居中。</li><li><code>baseline</code>: 子元素的第一行文字的基线对齐。</li><li><code>stretch</code>: 如果子元素未设置高度或设为 <code>auto</code>，将占满整个容器的高度。</li></ul></li><li><code>align-content</code>: 定义数量超过一行的子元素的垂直对齐方式。 <ul><li><code>flex-start</code>: 对齐顶部。</li><li><code>flex-end</code>: 对齐底部。</li><li><code>center</code>: 垂直居中。</li><li><code>space-between</code>: 垂直两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>: 垂直两端对齐，每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>: 如果子元素未设置高度或设为 <code>auto</code>，将占满整个容器的高度。</li></ul></li></ul><h4 id="容器内子元素的属性" tabindex="-1">容器内子元素的属性 <a class="header-anchor" href="#容器内子元素的属性" aria-label="Permalink to &quot;容器内子元素的属性&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;integer&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 定义子元素的排列顺序。数值越小，排列越靠前，默认为0。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-grow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;number&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 定义子元素的放大比例，默认为0，即如果存在剩余空间，也不放大。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-shrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;number&gt;; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 定义了子元素的缩小比例，默认为1，即如果空间不足，该项目将缩小。 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex-basis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;length&gt; | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 定义了子元素所占固定空间（如100px），默认auto */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: &lt;flex-grow&gt; &lt;flex-shrink（可选）&gt; &lt;flex-basis（可选）&gt; ]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 快捷值：initial (0 1 auto)(默认), auto (1 1 auto), none (0 0 auto), 1 (1 1 0%), 0 (0 1 0%)*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（默） | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">baseline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stretch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 该属性用来覆盖父元素统一的align-items属性，达到该子元素的个性化 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.zhangxinxu.com/wordpress/2020/10/css-flex-0-1-none/" target="_blank" rel="noreferrer">flex:0 flex:1 flex:none flex:auto 应该在什么场景下使用</a></p>`,12),t=[n];function h(k,p,d,r,E,c){return a(),i("div",null,t)}const y=s(e,[["render",h]]);export{g as __pageData,y as default};
