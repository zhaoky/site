import{_ as i,c as s,o as a,U as e}from"./chunks/framework.GU250d-J.js";const g=JSON.parse('{"title":"前端安全汇总（持续更新）","description":"","frontmatter":{},"headers":[],"relativePath":"exp/390.md","filePath":"exp/390.md"}'),t={name:"exp/390.md"},o=e(`<h1 id="前端安全汇总-持续更新" tabindex="-1">前端安全汇总（持续更新） <a class="header-anchor" href="#前端安全汇总-持续更新" aria-label="Permalink to &quot;前端安全汇总（持续更新）&quot;">​</a></h1><blockquote><p>在移动互联网时代，信息安全越来越重要。前端方面也面临着越来越多的安全挑战，本文收集了网上各位大佬的分析总结，将持续整理总结常见的安全问题及其防御措施。</p></blockquote><h2 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h2><h3 id="csrf-概念" tabindex="-1">CSRF 概念 <a class="header-anchor" href="#csrf-概念" aria-label="Permalink to &quot;CSRF 概念&quot;">​</a></h3><p><code>CSRF</code>（Cross-site request forgery）<strong>跨站请求伪造</strong>：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证(<code>cookies</code> 等)，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><h3 id="csrf-攻击流程" tabindex="-1">CSRF 攻击流程 <a class="header-anchor" href="#csrf-攻击流程" aria-label="Permalink to &quot;CSRF 攻击流程&quot;">​</a></h3><ol><li>受害者登录 <code>a.com</code>，并保留了登录凭证（<code>Cookie</code>）。</li><li>攻击者引诱受害者访问了 <code>b.com</code>。</li><li><code>b.com</code> 向 <code>a.com</code> 发送了一个请求：<code>a.com/act=xx</code>。浏览器会<strong>默认携带</strong> <code>a.com</code> 的 <code>Cookie</code>。</li><li><code>a.com</code> 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li><code>a.com</code> 以受害者的名义执行了 <code>act=xx</code>。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 <code>a.com</code> 执行了自己定义的操作。</li></ol><h3 id="csrf-攻击类型" tabindex="-1">CSRF 攻击类型 <a class="header-anchor" href="#csrf-攻击类型" aria-label="Permalink to &quot;CSRF 攻击类型&quot;">​</a></h3><h4 id="get" tabindex="-1">GET <a class="header-anchor" href="#get" aria-label="Permalink to &quot;GET&quot;">​</a></h4><p><code>GET</code> 类型的 <code>CSRF</code> 利用非常简单，只需要一个 <code>HTTP</code> 请求，一般会这样利用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://bank.example/withdraw?amount=10000&amp;for=hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>在受害者访问含有这个 <code>img</code> 的页面后，浏览器会自动向 <code>http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker</code> 发出一次 <code>HTTP</code> 请求。<code>bank.example</code> 就会收到包含受害者登录信息的一次跨域请求。</p><h4 id="post" tabindex="-1">POST <a class="header-anchor" href="#post" aria-label="Permalink to &quot;POST&quot;">​</a></h4><p>这种类型的 <code>CSRF</code> 利用起来通常使用的是一个自动提交的表单，如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://bank.example/withdraw&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;account&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xiaoming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amount&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;for&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.forms[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次 <code>POST</code> 操作。 <code>POST</code> 类型的攻击通常比 <code>GET</code> 要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许 <code>POST</code> 上面。</p><h4 id="链接" tabindex="-1">链接 <a class="header-anchor" href="#链接" aria-label="Permalink to &quot;链接&quot;">​</a></h4><p>链接类型的 <code>CSRF</code> 并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://test.com/csrf/withdraw.php?amount=1000&amp;for=hacker&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> taget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  重磅消息！！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>由于之前用户登录了信任的网站 <code>A</code>，并且保存登录状态，只要用户主动访问上面的这个 <code>PHP</code> 页面，则表示攻击成功。</p><h3 id="csrf-特性" tabindex="-1">CSRF 特性 <a class="header-anchor" href="#csrf-特性" aria-label="Permalink to &quot;CSRF 特性&quot;">​</a></h3><ul><li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li><li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。</li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。</li><li>跨站请求可以用各种方式：<code>图片 URL</code>、<code>超链接</code>、<code>CORS</code>、<code>Form 提交</code>等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li></ul><h3 id="csrf-防御措施" tabindex="-1">CSRF 防御措施 <a class="header-anchor" href="#csrf-防御措施" aria-label="Permalink to &quot;CSRF 防御措施&quot;">​</a></h3><p><code>CSRF</code> 通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对 <code>CSRF</code> 的防护能力来提升安全性。</p><h4 id="同源检测" tabindex="-1">同源检测 <a class="header-anchor" href="#同源检测" aria-label="Permalink to &quot;同源检测&quot;">​</a></h4><p>服务器可通过 <code>request headers</code> 里 <code>origin</code> 和 <code>referer</code> 两个字段确定请求的来源域。</p><p>如果攻击者设置 <code>Referrer Policy</code> 隐藏了 <code>referer</code>，则建议直接阻止(考虑排除搜索引擎搜索的情况)。</p><blockquote><p>cookie 是不能跨域访问的，为什么还会有 csrf？ 浏览器会依据加载的域名附带上对应域名 cookie。如用户在 a 网站登录且生成了授权的 cookies，然后访问 b 网站，b 站故意构造请求 a 站的请求，如删除操作之类的，用<strong>不受同源影响</strong>的 script，img 或者 iframe 之类的标签加载 a 地址，浏览器会附带上 a 站此登录用户的授权 cookie 信息，这样就构成 crsf，会删除掉当前用户的数据。</p></blockquote><h4 id="token" tabindex="-1">Token <a class="header-anchor" href="#token" aria-label="Permalink to &quot;Token&quot;">​</a></h4><p>而 <code>CSRF</code> 攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个 <code>CSRF</code> 攻击者无法获取到的 <code>Token</code>。服务器通过校验请求是否携带正确的 <code>Token</code>，来把正常的请求和攻击的请求区分开，也可以防范 <code>CSRF</code> 的攻击。</p><ol><li>将 <code>Token</code> 输出到页面中,对于页面整个 <code>DOM</code> 树中所有的 <code>a</code> 和 <code>form</code> 标签后都加入 <code>Token</code>。</li><li>页面提交的请求携带这个 <code>Token</code></li><li>服务器验证 <code>Token</code> 是否正确</li></ol><h4 id="验证码-密码" tabindex="-1">验证码&amp;密码 <a class="header-anchor" href="#验证码-密码" aria-label="Permalink to &quot;验证码&amp;密码&quot;">​</a></h4><p>在关键请求时要求再次输入验证码和密码之类的，打断 <code>csrf</code> 的进程，简单粗暴且有效。</p><h4 id="双重-cookie-验证" tabindex="-1">双重 Cookie 验证 <a class="header-anchor" href="#双重-cookie-验证" aria-label="Permalink to &quot;双重 Cookie 验证&quot;">​</a></h4><p>利用 <code>CSRF</code> 攻击不能获取到用户 <code>Cookie</code> 的特点，我们可以要求 <code>Ajax</code> 和表单请求携带一个 <code>Cookie</code> 中的值。</p><ol><li>在用户访问网站页面时，向请求域名注入一个 <code>Cookie</code>，内容为随机字符串（例如 <code>csrfcookie=v8g9e4ksfhw</code>）。</li><li>在前端向后端发起请求时，取出 <code>Cookie</code>，并添加到 <code>URL</code> 的参数中（接上例 <code>POST</code> <code>https://www.a.com/comment?csrfcookie=v8g9e4ksfhw</code>）。</li><li>后端接口验证 <code>Cookie</code> 中的字段与 <code>URL</code> 参数中的字段是否一致，不一致则拒绝。</li></ol><h4 id="samesite-属性" tabindex="-1">Samesite 属性 <a class="header-anchor" href="#samesite-属性" aria-label="Permalink to &quot;Samesite 属性&quot;">​</a></h4><p>Chrome 51 开始，浏览器的 <code>Cookie</code> 新增加了一个 <code>SameSite</code> 属性限制第三方 <code>Cookie</code>，用来防止 <code>CSRF</code> 攻击和用户追踪。</p><p><code>SameSite</code> 根据严格程度取值为 <code>Strict</code>, <code>Lax</code>, <code>None</code>。</p><p>目前兼容性及实用性都不太好（不支持子域），暂时不用。</p><h2 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h2><h3 id="xss-概念" tabindex="-1">XSS 概念 <a class="header-anchor" href="#xss-概念" aria-label="Permalink to &quot;XSS 概念&quot;">​</a></h3><p><code>Cross-Site Scripting</code>（跨站脚本攻击）简称 <code>XSS</code>，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 <code>Cookie</code>、<code>SessionID</code> 等，进而危害数据安全。</p><h3 id="xss-分类" tabindex="-1">XSS 分类 <a class="header-anchor" href="#xss-分类" aria-label="Permalink to &quot;XSS 分类&quot;">​</a></h3><table><thead><tr><th>类型</th><th>存储区</th><th>插入点</th></tr></thead><tbody><tr><td>存储型 XSS</td><td>后端数据库</td><td>HTML</td></tr><tr><td>反射型 XSS</td><td>URL</td><td>HTML</td></tr><tr><td>DOM 型 XSS</td><td>后端数据库/前端存储/URL</td><td>前端 JavaScript</td></tr></tbody></table><h4 id="存储型-xss" tabindex="-1">存储型 XSS <a class="header-anchor" href="#存储型-xss" aria-label="Permalink to &quot;存储型 XSS&quot;">​</a></h4><ol><li>攻击者将恶意代码提交到目标网站的数据库中。</li><li>用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 <code>HTML</code> 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。</p><h4 id="反射型-xss" tabindex="-1">反射型 XSS <a class="header-anchor" href="#反射型-xss" aria-label="Permalink to &quot;反射型 XSS&quot;">​</a></h4><ol><li>攻击者构造出特殊的 <code>URL</code>，其中包含恶意代码。</li><li>用户打开带有恶意代码的 <code>URL</code> 时，网站服务端将恶意代码从 <code>URL</code> 中取出，拼接在 HTML 中返回给浏览器。</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p>反射型 <code>XSS</code> 漏洞常见于通过 <code>URL</code> 传递参数的功能，如网站搜索、跳转等。由于需要用户主动打开恶意的 <code>URL</code> 才能生效，攻击者往往会结合多种手段诱导用户点击。</p><h4 id="dom-型-xss" tabindex="-1">DOM 型 XSS <a class="header-anchor" href="#dom-型-xss" aria-label="Permalink to &quot;DOM 型 XSS&quot;">​</a></h4><ol><li>攻击者构造出特殊的 <code>URL</code>，其中包含恶意代码。</li><li>用户打开带有恶意代码的 <code>URL</code>。</li><li>用户浏览器接收到响应后解析执行，前端 <code>JavaScript</code> 取出 <code>URL</code> 中的恶意代码并执行。</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。</li></ol><p><code>DOM</code> 型 <code>XSS</code> 跟前两种 <code>XSS</code> 的区别：<code>DOM</code> 型 <code>XSS</code> 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 <code>JavaScript</code> 自身的安全漏洞，而其他两种 <code>XSS</code> 都属于服务端的安全漏洞。</p><h3 id="xss-防御" tabindex="-1">XSS 防御 <a class="header-anchor" href="#xss-防御" aria-label="Permalink to &quot;XSS 防御&quot;">​</a></h3><h4 id="针对攻击者提交恶意代码" tabindex="-1">针对攻击者提交恶意代码 <a class="header-anchor" href="#针对攻击者提交恶意代码" aria-label="Permalink to &quot;针对攻击者提交恶意代码&quot;">​</a></h4><h5 id="输入过滤" tabindex="-1">输入过滤 <a class="header-anchor" href="#输入过滤" aria-label="Permalink to &quot;输入过滤&quot;">​</a></h5><p>对前端而言，输入过滤不可靠。因为一旦攻击者绕过前端过滤，直接构造请求，就可以提交恶意代码了。</p><h5 id="输入内容长度控制" tabindex="-1">输入内容长度控制 <a class="header-anchor" href="#输入内容长度控制" aria-label="Permalink to &quot;输入内容长度控制&quot;">​</a></h5><p>对于不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 <code>XSS</code> 发生，但可以增加 <code>XSS</code> 攻击的难度。</p><h5 id="验证码" tabindex="-1">验证码 <a class="header-anchor" href="#验证码" aria-label="Permalink to &quot;验证码&quot;">​</a></h5><p>防止脚本冒充用户提交危险操作。</p><h4 id="针对浏览器执行恶意代码" tabindex="-1">针对浏览器执行恶意代码 <a class="header-anchor" href="#针对浏览器执行恶意代码" aria-label="Permalink to &quot;针对浏览器执行恶意代码&quot;">​</a></h4><h5 id="纯前端渲染" tabindex="-1">纯前端渲染 <a class="header-anchor" href="#纯前端渲染" aria-label="Permalink to &quot;纯前端渲染&quot;">​</a></h5><p>在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（<code>.innerText</code>），还是属性（<code>.setAttribute</code>），还是样式（<code>.style</code>）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。</p><h5 id="转义-html" tabindex="-1">转义 HTML <a class="header-anchor" href="#转义-html" aria-label="Permalink to &quot;转义 HTML&quot;">​</a></h5><p>应当尽量避免转义 <code>HTML</code>。但如果不是纯前端渲染，就需要采用合适的转义库，对 <code>HTML</code> 模板各处插入点进行充分的转义。</p><h5 id="预防-dom-型-xss-攻击" tabindex="-1">预防 DOM 型 XSS 攻击 <a class="header-anchor" href="#预防-dom-型-xss-攻击" aria-label="Permalink to &quot;预防 DOM 型 XSS 攻击&quot;">​</a></h5><p>防范存储型和反射型 <code>XSS</code> 是后端 <code>RD</code> 的责任。而 <code>DOM</code> 型 <code>XSS</code> 攻击不发生在后端。<code>DOM</code> 型 <code>XSS</code> 攻击，实际上就是网站前端 <code>JavaScript</code> 代码本身不够严谨，把不可信的数据当作代码执行了。</p><p>在使用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 <code>HTML</code> 插到页面上，而应尽量使用 <code>.textContent</code>、<code>.setAttribute()</code> 等。</p><p>如果用 <code>Vue/React</code> 技术栈，并且不使用 <code>v-html/dangerouslySetInnerHTML</code> 功能，就在前端 <code>render</code> 阶段避免 <code>innerHTML、outerHTML</code> 的 <code>XSS</code> 隐患。</p><p><code>DOM</code> 中的内联事件监听器，如 <code>location、onclick、onerror、onload、onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，<code>JavaScript</code> 的 <code>eval()、setTimeout()、setInterval()</code> 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 <code>API</code>，很容易产生安全隐患，请务必避免。</p><h5 id="csp" tabindex="-1">CSP <a class="header-anchor" href="#csp" aria-label="Permalink to &quot;CSP&quot;">​</a></h5><p>内容安全策略 (<code>CSP</code>) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (<code>XSS</code>) 和数据注入攻击等。</p><p>通过 <code>HTTP Header</code> 来定义(优先)：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Content-Security-Policy:&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 策略集</span></span></code></pre></div><p>通过 <code>html meta</code> 标签使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content-security-policy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;策略集&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noreferrer">更多</a>策略</p><ul><li>禁止加载外域代码，防止复杂的攻击逻辑。</li><li>禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。</li><li>禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。</li><li>禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。</li><li>合理使用上报可以及时发现 XSS，利于尽快修复问题。</li></ul><h5 id="httponly-secure" tabindex="-1">HttpOnly &amp; Secure <a class="header-anchor" href="#httponly-secure" aria-label="Permalink to &quot;HttpOnly &amp; Secure&quot;">​</a></h5><ul><li><code>cookie</code> 中设置了 <code>HttpOnly</code> 属性，禁止 <code>JavaScript</code> 读取某些敏感 <code>Cookie</code>，攻击者完成 <code>XSS</code> 注入后也无法窃取此 <code>Cookie</code>。</li><li><code>cookie</code> 中设置了 <code>Secure</code> 属性,规定 <code>cookie</code> 只能在 <code>https</code> 协议下才能够发送到服务器。防止信息在传递的过程中被监听捕获后信息泄漏。</li></ul><h2 id="iframe-嵌套" tabindex="-1">iframe 嵌套 <a class="header-anchor" href="#iframe-嵌套" aria-label="Permalink to &quot;iframe 嵌套&quot;">​</a></h2><p>点击劫持 (<code>ClickJacking</code>) 一般会利用透明 <code>iframe</code> 覆盖原网页诱导用户进行某些操作达成目的。</p><h3 id="防止其他页面通过-iframe-引用" tabindex="-1">防止其他页面通过 iframe 引用 <a class="header-anchor" href="#防止其他页面通过-iframe-引用" aria-label="Permalink to &quot;防止其他页面通过 iframe 引用&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自己网站添加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (top.location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self.location) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top.location.href </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//若被其他网站引用则强制跳转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="x-frame-options" tabindex="-1">X-FRAME-OPTIONS <a class="header-anchor" href="#x-frame-options" aria-label="Permalink to &quot;X-FRAME-OPTIONS&quot;">​</a></h4><p>或者添加 <code>HTTP</code> 响应头： <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options" target="_blank" rel="noreferrer">X-FRAME-OPTIONS</a></p><p><code>HTTP</code> 响应头信息中的 <code>X-Frame-Options</code>，可以指示浏览器是否应该加载一个 <code>iframe</code> 中的页面。如果服务器响应头信息中没有 <code>X-Frame-Options</code>，则该网站存在 <code>ClickJacking</code> 攻击风险。</p><h3 id="防止引用的其他-iframe-篡改自己的页面" tabindex="-1">防止引用的其他 iframe 篡改自己的页面 <a class="header-anchor" href="#防止引用的其他-iframe-篡改自己的页面" aria-label="Permalink to &quot;防止引用的其他 iframe 篡改自己的页面&quot;">​</a></h3><p>添加 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe" target="_blank" rel="noreferrer">sandbox</a> 属性</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;其他页面.html&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> frameborder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sandbox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="opener" tabindex="-1">opener <a class="header-anchor" href="#opener" aria-label="Permalink to &quot;opener&quot;">​</a></h2><p>通过以下两种方式打开的页面可以使用 <code>window.opener</code> 来访问源页面的 <code>window</code> 对象，进而进行篡改原页面：</p><h3 id="window-open" tabindex="-1">window.open <a class="header-anchor" href="#window-open" aria-label="Permalink to &quot;window.open&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>防御方式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTab </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newTab.opener </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newTab.location </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url;</span></span></code></pre></div><h3 id="a-标签加-blank" tabindex="-1">a 标签加 <code>_blank</code> <a class="header-anchor" href="#a-标签加-blank" aria-label="Permalink to &quot;a 标签加 \`_blank\`&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.baidu.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>防御方式：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.baidu.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;noopener noreferrer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="cdn-劫持" tabindex="-1">CDN 劫持 <a class="header-anchor" href="#cdn-劫持" aria-label="Permalink to &quot;CDN 劫持&quot;">​</a></h2><p>出于性能考虑，前端应用通常会把一些静态资源存放到 <code>CDN</code>（Content Delivery Networks）上面，例如 <code>js</code> 脚本和 <code>style</code> 文件。这么做可以显著提高前端应用的访问速度，但与此同时却也隐含了一个新的安全风险。如果攻击者劫持了 <code>CDN</code>，或者对 <code>CDN</code> 中的资源进行了污染，攻击者可以肆意篡改我们的前端页面，对用户实施攻击。</p><p><a href="https://www.zhihu.com/question/35720092/answer/523563873" target="_blank" rel="noreferrer">应对流量劫持，前端能做哪些工作？</a></p><h3 id="sri" tabindex="-1">SRI <a class="header-anchor" href="#sri" aria-label="Permalink to &quot;SRI&quot;">​</a></h3><h4 id="sri-简介" tabindex="-1">SRI 简介 <a class="header-anchor" href="#sri-简介" aria-label="Permalink to &quot;SRI 简介&quot;">​</a></h4><p>子资源完整性(<code>SRI</code>)是允许浏览器检查其获得的资源（例如从 <code>CDN</code> 获得的）是否被篡改的一项安全特性。它通过验证获取文件的哈希值是否和你提供的哈希值一样来判断资源是否被篡改。</p><p>通过给 <code>link</code> 标签或者 <code>script</code> 标签增加 <code>integrity</code> 属性即可开启 <code>SRI</code> 功能.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;//s.url.cn/xxxx/aaa.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> integrity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sha256-xxx sha384-yyy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anonymous&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>integrity</code> 值分成两个部分，第一部分指定哈希值的生成算法（<code>sha256</code>、<code>sha384</code> 及 <code>sha512</code>），第二部分是经过 <code>base64</code> 编码的实际哈希值，两者之间通过一个短横（<code>-</code>）分割。<code>integrity</code> 值可以包含多个由空格分隔的哈希值，只要文件匹配其中任意一个哈希值，就可以通过校验并加载该资源。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_settings_attributes" target="_blank" rel="noreferrer">crossorigin=&quot;anonymous&quot;</a> 的作用是引入跨域脚本，使用 <code>SRI</code> 要保证资源同域或开启跨域。如果不加此属性则表示不开启 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noreferrer">CORS</a> 策略。</p><h4 id="浏览器处理-sri-原理" tabindex="-1">浏览器处理 SRI 原理 <a class="header-anchor" href="#浏览器处理-sri-原理" aria-label="Permalink to &quot;浏览器处理 SRI 原理&quot;">​</a></h4><ul><li>当浏览器在 <code>script</code> 或者 <code>link</code> 标签中遇到 <code>integrity</code> 属性之后，会在执行脚本或者应用样式表之前对比所加载文件的哈希值和期望的哈希值。</li><li>当脚本或者样式表的哈希值和期望的不一致时，浏览器必须拒绝执行脚本或者应用样式表，并且必须返回一个网络错误说明获得脚本或样式表失败。</li></ul><h4 id="如何使用-sri" tabindex="-1">如何使用 SRI <a class="header-anchor" href="#如何使用-sri" aria-label="Permalink to &quot;如何使用 SRI&quot;">​</a></h4><p>通过使用 <code>webpack</code> 的 <code>html-webpack-plugin</code> 和 <code>webpack-subresource-integrity</code> 可以生成包含 <code>integrity</code> 属性 <code>script</code> 标签。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SriPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;webpack-subresource-integrity&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compiler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> webpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    crossOriginLoading: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;anonymous&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SriPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      hashFuncNames: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sha256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sha384&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      enabled: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>然后通过插件 <code>script-ext-html-webpack-plugin</code> 在 <code>script</code> 里注入 <code>onerror</code> 事件和 <code>onsuccess</code> <code>事件。onerror</code> 事件里再次请求一次数据，比较两次数据是否一致来判断是否被 <code>CDN</code> 劫持。</p><h4 id="联合-csp" tabindex="-1">联合 CSP <a class="header-anchor" href="#联合-csp" aria-label="Permalink to &quot;联合 CSP&quot;">​</a></h4><p>另外，通过在 <code>CSP</code> 头部添加：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Content-Security-Policy:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require-sri-for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这条指令规定了所有 <code>JavaScript</code> 都要有 <code>integrity</code> 属性，且通过验证才能被加载。</p><h2 id="中间人攻击" tabindex="-1">中间人攻击 <a class="header-anchor" href="#中间人攻击" aria-label="Permalink to &quot;中间人攻击&quot;">​</a></h2><h3 id="攻击原理" tabindex="-1">攻击原理 <a class="header-anchor" href="#攻击原理" aria-label="Permalink to &quot;攻击原理&quot;">​</a></h3><p>用户在访问某个网站的时候，在浏览器里却往往直接输入网站域名。浏览器便向网站发起一次 <code>HTTP</code> 请求，在得到一个重定向响应后，再发起一次 <code>HTTPS</code> 请求并得到最终的响应内容。由于在建立起 <code>HTTPS</code> 连接之前存在一次明文的 <code>HTTP</code> 请求和重定向，使得攻击者可以以中间人的方式劫持这次请求，从而进行后续的攻击，例如窃听数据，篡改请求和响应，跳转到钓鱼网站等。</p><h3 id="hsts" tabindex="-1">HSTS <a class="header-anchor" href="#hsts" aria-label="Permalink to &quot;HSTS&quot;">​</a></h3><p><code>HSTS</code> 的全称是 <code>HTTP</code> <code>Strict-Transport-Security</code>（严格传输安全），它是一个 <code>Web</code> 安全策略机制，通过服务器设置 <code>HTTP Response Header</code> 告诉浏览器只能通过 <code>HTTPS</code> 访问当前资源，而不是 <code>HTTP</code>。</p><h4 id="hsts-语法" tabindex="-1">HSTS 语法 <a class="header-anchor" href="#hsts-语法" aria-label="Permalink to &quot;HSTS 语法&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Strict-Transport-Security:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">max-age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includeSubDomains][</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preload]</span></span></code></pre></div><ul><li><code>max-age</code> 是必选参数，是一个以秒为单位的数值，它代表着 <code>HSTS Header</code> 的过期时间，通常设置为 1 年，即 31536000 秒。</li><li><code>includeSubDomains</code> 是可选参数，如果包含它，则意味着当前域名及其子域名均开启 <code>HSTS</code> 保护。</li><li><code>preload</code> 是可选参数，只有当你申请将自己的域名加入到浏览器内置列表的时候才需要使用到它</li></ul><h4 id="hsts-更多" tabindex="-1">HSTS 更多 <a class="header-anchor" href="#hsts-更多" aria-label="Permalink to &quot;HSTS 更多&quot;">​</a></h4><ul><li>只要是在有效期内，浏览器都将直接强制性的发起 <code>HTTPS</code> 请求。</li><li><code>HSTS</code> 让浏览器强制拒绝不安全的链接，不给用户选择的机会。</li><li>第一次访问网站的时候，依然需要一次明文的 <code>HTTP</code> 请求和重定向才能切换到 <code>HTTPS</code>，以及刷新 <code>HSTS</code> 信息，此时仍然可以进行中间人攻击，对此，浏览器里内置一个列表 <code>Preload List</code>，只要是在这个列表里的域名，无论何时、何种情况，浏览器都只使用 <code>HTTPS</code> 发起连接。</li></ul><h3 id="cookie-secure" tabindex="-1">cookie secure <a class="header-anchor" href="#cookie-secure" aria-label="Permalink to &quot;cookie secure&quot;">​</a></h3><p>通过 <code>cookie</code> <code>secure</code> 保证你的 <code>session cookie</code> 对于攻击者是不可见的，避免中间人攻击。</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h3><p><code>HTTPS=HTTP+SSL</code></p><p>确保所有需要的资源都用 <code>HTTPS</code> 引入.</p><h4 id="ssl-tls" tabindex="-1">SSL/TLS <a class="header-anchor" href="#ssl-tls" aria-label="Permalink to &quot;SSL/TLS&quot;">​</a></h4><p>传输层安全协议（<code>Transport Layer Security / TLS</code>）及其前身安全套接层（<code>Secure Sockets Layer / SSL</code>）为浏览器和服务器提供了端到端的加密手段，为互联网通信提供了安全可靠性保障。没有 <code>TLS</code>，其他安全手段不堪一击。<code>TLS</code> 是 <code>HTTP</code> 安全的基石。</p><h3 id="cache-control" tabindex="-1">Cache Control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;Cache Control&quot;">​</a></h3><p>指定页面的缓存策略。强烈建议手动指定页面缓存策略，否则会由浏览器和代理来控制是否缓存内容。一个不当的缓存策略可能会导致性能问题和安全问题。</p><h3 id="content-type-options" tabindex="-1">Content Type Options <a class="header-anchor" href="#content-type-options" aria-label="Permalink to &quot;Content Type Options&quot;">​</a></h3><p>通常浏览器根据响应头的 <code>Content Type</code> 字段分辨资源类型，但假若某些资源 <code>Content Type</code> 是错的或未定义，浏览器会启用 <code>MIME-sniffing</code> 来猜测该资源的类型，解析内容并执行。</p><p><code>X-Content-Type-Options</code> 响应头可以关闭浏览器的资源 <code>MIME-sniffing</code> 功能:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">X-Content-Type-Options:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nosniff</span></span></code></pre></div><h3 id="信息泄露" tabindex="-1">信息泄露 <a class="header-anchor" href="#信息泄露" aria-label="Permalink to &quot;信息泄露&quot;">​</a></h3><p>以下都应删除</p><ul><li><code>Server Banner</code> 响应头里加入 <code>Server Banner</code> 来标明自己身份和版本号 如：<code>server:nginx/1.10.0 (Ubuntu)</code></li><li><code>Web</code> 框架信息 很多 <code>Web</code> 框架都会设置响应头来标示自己身份、版本。这些响应头都是非标准的，而且也不影响页面渲染，只是为了框架自身的宣传。如：<code>X-Powered-By, X-Runtime, X-Version, X-AspNet-Version</code> 等</li></ul><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noreferrer">前端安全系列（一）：如何防止 XSS 攻击？</a></li><li><a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noreferrer">前端安全系列（二）：如何防止 CSRF 攻击？</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noreferrer">Cookie 的 SameSite 属性</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">内容安全策略( CSP )</a></li><li><a href="https://zhuanlan.zhihu.com/p/83865185" target="_blank" rel="noreferrer">前端安全问题汇总（实战）</a></li><li><a href="https://www.cnblogs.com/xd502djj/p/11660496.html" target="_blank" rel="noreferrer">HSTS 详解</a></li><li><a href="https://github.com/chokcoco/httphijack/blob/master/httphijack1.1.0.js" target="_blank" rel="noreferrer">前端监控方案</a></li><li><a href="https://juejin.im/post/5c355a816fb9a049a42f3ac8" target="_blank" rel="noreferrer">使用 SRI 解决 CDN 劫持</a></li><li><a href="https://juejin.im/entry/59127ac32f301e0057ef7cfc" target="_blank" rel="noreferrer">HTTP 安全最佳实践</a></li></ul>`,151),h=[o];function l(n,d,c,p,r,k){return a(),s("div",null,h)}const u=i(t,[["render",l]]);export{g as __pageData,u as default};
