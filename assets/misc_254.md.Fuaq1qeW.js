import{_ as s,c as i,o as a,U as e}from"./chunks/framework.7BZ-Q4AH.js";const g=JSON.parse('{"title":"js判断变量是否是dom对象","description":"","frontmatter":{},"headers":[],"relativePath":"misc/254.md","filePath":"misc/254.md"}'),n={name:"misc/254.md"},t=e(`<h1 id="js判断变量是否是dom对象" tabindex="-1">js判断变量是否是dom对象 <a class="header-anchor" href="#js判断变量是否是dom对象" aria-label="Permalink to &quot;js判断变量是否是dom对象&quot;">​</a></h1><p>我们在写 <code>js</code> 代码时有时需要判断某个对象是不是 <code>DOM</code> 对象，然后再进行后续的操作，这里我给出一种兼容各大浏览器，同时又算是比较稳妥的一种方法。</p><p>要判断一个对象是否 <code>DOM</code> 对象，首先想到的无非就是它是否具有 <code>DOM</code> 对象的各种属性或特征，比如是否有 <code>nodeType</code> 属性，有 <code>tagName</code> 属性，等等。判断的特征越多，也就越可靠，因为毕竟我们自定义的 <code>js</code> 对象也可以有那些属性。还有其他方法吗?</p><p>在 <code>DOM Level2</code> 标准中定义了一个 <code>HTMLElement</code> 对象，它规定所有的 <code>DOM</code> 对象都是 <code>HTMLElement</code> 的实例，所以我们可以利用这点来判断一个对象是不是 <code>DOM</code> 对象: 如果该对象是 <code>HTMLElement</code> 的实例，则它肯定是一个 <code>DOM</code> 对象。在不支持 <code>HTMLElement</code> 的浏览器中我们则还是使用特征检测法。</p><p>首先要对 <code>HTMLElement</code> 进行类型检查，因为即使在支持 <code>HTMLElement</code> 的浏览器中，类型却是有差别的，在<code>Chrome,Opera</code> 中 <code>HTMLElement</code> 的类型为 <code>function</code>，此时就不能用它来判断了</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLElement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.nodeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.nodeName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span></code></pre></div>`,6),h=[t];function p(k,l,d,o,c,r){return a(),i("div",null,h)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
