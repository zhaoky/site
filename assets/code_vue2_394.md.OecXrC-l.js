import{_ as i,c as a,o as e,R as n}from"./chunks/framework.4AYGp9T7.js";const c=JSON.parse('{"title":"源码笔记（三）：beforeCreate 阶段","description":"","frontmatter":{},"headers":[],"relativePath":"code/vue2/394.md","filePath":"code/vue2/394.md"}'),t={name:"code/vue2/394.md"};function p(h,s,l,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="源码笔记-三-beforecreate-阶段" tabindex="-1">源码笔记（三）：beforeCreate 阶段 <a class="header-anchor" href="#源码笔记-三-beforecreate-阶段" aria-label="Permalink to &quot;源码笔记（三）：beforeCreate 阶段&quot;">​</a></h1><p>根据 <code>demo</code> 配置，将 <code>demo</code> 跑起来，然后忽略掉分支剧情，只分析 <code>Vue</code> 运行的主流程。</p><h2 id="引入-vue-和-app" tabindex="-1">引入 Vue 和 App <a class="header-anchor" href="#引入-vue-和-app" aria-label="Permalink to &quot;引入 Vue 和 App&quot;">​</a></h2><p>执行 <code>index.js</code>, 先执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./app.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>变量 <code>Vue</code> 为 <code>Vue</code> 的构造函数，在执行 <code>Vue</code> 文件的过程中，会初始化设置 <code>Vue</code> 上的原型变量方法，<code>Watch</code> 类，<code>Dep</code> 类等等。</li><li>变量 <code>App</code> 为经过 <code>webpack</code> 编译，通过 <code>vue-loader，vue-template-compiler，VueLoaderPlugin</code> 作用后的包含 <code>render</code> 和 <code>staticRenderFns</code> 的<code>组件选项对象</code>:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeDestroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  destroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroyed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ƒ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  staticRenderFns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _compiled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/app.vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中 <code>staticRenderFns</code> 包含标记为静态节点的 <code>vnode</code> 单独生成的 <code>render</code> 函数的数组。</p><h2 id="处理-vm-options" tabindex="-1">处理 <code>vm.$options</code> <a class="header-anchor" href="#处理-vm-options" aria-label="Permalink to &quot;处理 \`vm.$options\`&quot;">​</a></h2><p>执行 <code>new Vue()</code>，即执行了 <code>Vue</code> 原型链上 <code>_init</code> 方法，内部执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options._isComponent) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  initInternalComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.$options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mergeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveConstructorOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}, vm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>根据传入的 <code>options</code> 里是否包含组件标识而执行不同的方法。</p><h3 id="initinternalcomponent" tabindex="-1"><code>initInternalComponent</code> <a class="header-anchor" href="#initinternalcomponent" aria-label="Permalink to &quot;\`initInternalComponent\`&quot;">​</a></h3><p>如果是组件调用，则执行 <code>initInternalComponent</code> 设置 <code>vm.$options</code>。</p><p>以第一个 <code>App</code> 组件为例，方法中将组件的 <code>options</code> 赋给 <code>vm.$options</code> 的原型上。最后经过一系列的设置得到 <code>vm.$options</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Vue {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_isVue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_renderProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Proxy, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Vue, …} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//父组件实例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_parentVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: VNode {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-component-1-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, …} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件vnode</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">propsData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//组件vnode上的props</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_parentListeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//组件vnode上的事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_renderChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //插槽vnode</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_componentTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //组件vnode对应的组件实例名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其原型为挂载在子组件构造函数下的 <code>options</code> 属性（<code>Vue.extend</code> 里定义，为 <code>mergeOptions</code> 后的组件选项对象）。</p><h3 id="resolveconstructoroptions" tabindex="-1"><code>resolveConstructorOptions</code> <a class="header-anchor" href="#resolveconstructoroptions" aria-label="Permalink to &quot;\`resolveConstructorOptions\`&quot;">​</a></h3><p>如果不是组件，则执行 <code>resolveConstructorOptions</code> 和 <code>mergeOptions</code> 设置 <code>vm.$options</code>。</p><p>参数 <code>Ctor</code> 即为传入的 <code>vm.constructor</code> 即 <code>Vue</code> 构造函数。<code>Ctor.options</code> 即为 <code>Vue.options</code>，该 <code>options</code> 在方法 <code>initGlobalAPI</code> 中定义。本 <code>demo</code> 的 <code>Ctor.options</code> 为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeepAlive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Transition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TransitionGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  directives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>判断 <code>Ctor.super</code> 是否存在，不存在即为普通构造器，方法直接返回 <code>Ctor.options</code>；若存在，说明这是通过 <code>Vue.extend</code> 构造的子类，那么就递归合并其父级构造器的 <code>options</code> 和本身的 <code>Ctor.extendOptions</code>，最后返回合并后的 <code>options</code> <a href="https://segmentfault.com/a/1190000014606817" target="_blank" rel="noreferrer">详解</a>。</p><h3 id="mergeoptions" tabindex="-1"><code>mergeOptions</code> <a class="header-anchor" href="#mergeoptions" aria-label="Permalink to &quot;\`mergeOptions\`&quot;">​</a></h3><p><code>mergeOptions</code> 里先对 <code>child（即参数 options）</code> 执行 <code>checkComponents</code> 方法检查 <code>options.components</code> 命名是否合法。然后根据 <code>options</code> 的配置，接着检查并格式化了 <code>Props，Inject，Directives</code>。然后根据是否有 <code>extends</code> 和 <code>mixins</code> 递归调用 <code>mergeOptions</code> 合并 <code>extends</code> 和 <code>mixins</code>。</p><p>调用 <code>mergeField</code> 对 <code>parent（resolveConstructorOptions(vm.constructor) 得到）</code> 和 <code>child（options）</code> 进行了 <code>strats</code> 处理。 <code>strats</code> 用于合并处理 <code>options</code> <a href="https://segmentfault.com/a/1190000014738314" target="_blank" rel="noreferrer">详解</a>。合并后，其中 <code>data</code> 为函数 <code>mergedInstanceDataFn</code>。最后将 <code>options</code> 赋给实例 <code>$options</code> 属性上。得到 <code>vm.$options</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  directives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  filters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#main&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mergedInstanceDataFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ƒ}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {…}}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ƒ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ƒ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ƒ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ƒ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ƒ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ƒ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h2><p>然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initLifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initRender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm);</span></span></code></pre></div><p>下面分别分析各初始化内容：</p><h3 id="initproxy" tabindex="-1">initProxy <a class="header-anchor" href="#initproxy" aria-label="Permalink to &quot;initProxy&quot;">​</a></h3><p>即执行 <code>vm._renderProxy = new Proxy(vm, handlers);</code> 其中 <code>handlers</code> 为 <code>hasHandler</code>。</p><p>如果 <code>options</code> 有 <code>render</code>，且 <code>_withStripped</code> 为真（比如组件），<code>handlers</code> 为 <code>getHandler</code>。</p><h3 id="initlifecycle" tabindex="-1">initLifecycle <a class="header-anchor" href="#initlifecycle" aria-label="Permalink to &quot;initLifecycle&quot;">​</a></h3><p>初始化了实例上 <code>$parent</code>, <code>$root</code>, <code>$children</code>, <code>_watcher</code>, <code>_isMounted</code> 等属性。</p><p>这里如果是组件执行的话，会更新其父子组件的对应关系，更新父组件上的 <code>$children</code> 实例数组，更新当前组件的 <code>$parent</code>, <code>$root</code> 实例。</p><p>这里如果是 <code>keep-alive</code> 组件里的子组件的话，即 <code>parent.options.abstract</code> 为真，则更新子组件的 <code>$parent</code> 为 <code>keep-alive</code> 的父组件。</p><h3 id="initevents" tabindex="-1">initEvents <a class="header-anchor" href="#initevents" aria-label="Permalink to &quot;initEvents&quot;">​</a></h3><p>如果是在子组件，则判断是否存在 <code>$options._parentListeners</code> 即在组件 <code>Vnode</code> 上的事件，如果有则通过 <code>updateComponentListeners-&gt;updateListeners-&gt;add</code> 执行 <code>vm.$on</code> 监听当前子组件实例上的自定义事件，事件由 <code>vm.$emit</code> 触发。</p><blockquote><p><code>$on，$emit</code> 本质为一个发布订阅，<code>$on</code> 收集订阅挂载在实例的 <code>_events</code> 属性下， <code>$emit</code> 执行订阅事件列表。</p></blockquote><h3 id="initrender" tabindex="-1">initRender <a class="header-anchor" href="#initrender" aria-label="Permalink to &quot;initRender&quot;">​</a></h3><p>初始化了渲染相关的函数 <code>_c</code> , <code>$createElement</code> 等，然后监听了实例上：</p><ul><li><code>$attrs</code>(包含了父作用域中不作为 <code>prop</code> 被识别 (且获取) 的特性绑定)</li><li><code>$listeners</code>(包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器)</li></ul><p>这里两个属性（各自 <code>new</code> 了一个 <code>Dep</code> 订阅者列表）。</p><p>如果是子组件，会将 <code>_parentVnode</code> 赋给 <code>vm.$vnode</code>。</p><p>如果有普通插槽，命名插槽，作用域插槽等，则初始化 <code>$slots</code>， <code>$scopedSlots</code> 。</p><h2 id="触发-beforecreate-钩子" tabindex="-1">触发 beforeCreate 钩子 <a class="header-anchor" href="#触发-beforecreate-钩子" aria-label="Permalink to &quot;触发 beforeCreate 钩子&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeCreate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>执行生命周期钩子 <code>beforeCreate</code>，打印 <code>vue beforeCreate</code>。</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><ol><li>本章介绍了 <code>vue</code> 执行的 <code>beforeCreate</code> 阶段；</li><li>合并处理了组件 <code>options</code> ，父组件 <code>options</code>，平台初始化的 <code>options</code>，得到 <code>vm.$options</code>；</li><li>初始化与生命周期相关的 <code>Vue</code> 实例的各种属性，如父子关系的 <code>$parent</code> 等，初始化 <code>event</code> 事件传递相关；</li><li>初始化了渲染相关的 <code>Vue</code> 实例上的函数，插槽等。</li></ol>`,51)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};
