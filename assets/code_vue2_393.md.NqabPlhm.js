import{_ as s,c as e,o as i,U as a}from"./chunks/framework.Pf98aJyB.js";const g=JSON.parse('{"title":"源码笔记（二）：源码结构及调试介绍","description":"","frontmatter":{},"headers":[],"relativePath":"code/vue2/393.md","filePath":"code/vue2/393.md"}'),n={name:"code/vue2/393.md"},t=a(`<h1 id="源码笔记-二-源码结构及调试介绍" tabindex="-1">源码笔记（二）：源码结构及调试介绍 <a class="header-anchor" href="#源码笔记-二-源码结构及调试介绍" aria-label="Permalink to &quot;源码笔记（二）：源码结构及调试介绍&quot;">​</a></h1><h2 id="项目准备" tabindex="-1">项目准备 <a class="header-anchor" href="#项目准备" aria-label="Permalink to &quot;项目准备&quot;">​</a></h2><p>拉取 <code>vue</code> 代码到本地仓库，并切换版本到 <code>v2.6.11</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/vuejs/vue.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2.6.11</span></span></code></pre></div><p>进入 <code>vue</code> 文件夹根目录下安装依赖：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span></span></code></pre></div><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><p>忽略掉 <code>.babelrc.js,.editorconfig</code> 等常规项目文件，只介绍 <code>vue</code> 相关。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ benchmarks                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基准数据,一些测试性能的 demo，用于与竞品框架对比</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ dist                       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建后输出的不同版本的 Vue 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ examples                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用 Vue 写的一些小 demo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ flow                       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// flow 静态类型声明文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ packages                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建后输出的服务端渲染、模板编译器、weex 相关的NPM包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ scripts                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存放 npm scripts 执行的各种 script，用于项目编译、测试、构建。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ src                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 核心</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├─ compiler               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译器相关，用于解析模版，template-&gt;render()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ codegen            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AST 转换为 render()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ directives         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成 render() 之前需要处理的指令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ parser             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// template 解析为 AST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ codeframe.js       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出 generateCodeFrame，用于格式化 console template</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.js </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出 createCompilerCreator，用于返回 createCompiler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">detector.js  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查 AST 的错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ helpers.js         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一些编译的帮助方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ index.js           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出 createCompiler 方法，用于返回 compile 和 compileToFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ optimizer.js       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 标记静态节点，用于重建优化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └─ tofunction.js      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出 createCompileToFunctionFn，用于返回 compileToFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├─ core                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 核心代码，包括内置组件，全局API封装，Vue 实例化，观察者，虚拟DOM, 工具函数等等。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ components         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内置组件定义，目前包含 Keep-Alive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局 api 定义，如 Vue.component,Vue.use,Vue.extend,Vue.mixin等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ instance           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例化相关内容，生命周期定义、事件等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ observer           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据监听，双向数据绑定，订阅中心设置等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ util               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工具方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ vdom               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 虚拟DOM相关</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ config.js          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基础配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └─ index.js           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出 Vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├─ platforms              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 跨平台相关</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├─ web                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// web端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           ├─ compiler       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 createCompiler 所需参数 baseOptions，导出compile，compileToFunctions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           ├─ runtime        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在Vue上挂载了一些新的directives，components，config，__patch__，$mount(重写)等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           ├─ server         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 服务端渲染</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           ├─ util           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工具方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│           └─ xxx.js         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5个入口js，不同构建调用不用的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └─ weex               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// weex相关</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├─ server                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 服务端渲染（ssr）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├─ sfc                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单文件组件解析（*.vue）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └─ shared                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局共享的常量，方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ test                       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试用例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ types                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// typescript 类型声明文件</span></span></code></pre></div><h2 id="针对目录的一些解释" tabindex="-1">针对目录的一些解释 <a class="header-anchor" href="#针对目录的一些解释" aria-label="Permalink to &quot;针对目录的一些解释&quot;">​</a></h2><h3 id="dist" tabindex="-1">dist <a class="header-anchor" href="#dist" aria-label="Permalink to &quot;dist&quot;">​</a></h3><p><code>dist</code> 下有 10 几种不同版本的 <code>vue</code> 文件，他们是根据 <code>不同规范（包括 CommonJS 规范，ES Module，UMD）</code> 和 <code>是否包含编译器</code> 和 <code>不同环境</code> 构建出的不同版本。</p><p>具体查阅 <a href="https://cn.vuejs.org/v2/guide/installation.html?spm=a2c7j.-zh-guide-use-vue-in-weex.0.0.7828400e0FroJe#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A" target="_blank" rel="noreferrer">文档</a></p><h3 id="flow" tabindex="-1">flow <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;flow&quot;">​</a></h3><p>类似 <code>TypeScript</code>，<a href="https://flow.org/" target="_blank" rel="noreferrer">Flow</a> 是 <code>facebook</code> 出品的 <code>JavaScript</code> 静态类型检查工具。<code>Vue.js</code> 的源码利用了 <code>Flow</code> 做了静态类型检查。</p><h3 id="packages" tabindex="-1">packages <a class="header-anchor" href="#packages" aria-label="Permalink to &quot;packages&quot;">​</a></h3><p>通过执行 <code>npm script</code> 对应的命令可编译出以下 <code>npm</code> 包。</p><h4 id="vue-server-renderer" tabindex="-1">vue-server-renderer <a class="header-anchor" href="#vue-server-renderer" aria-label="Permalink to &quot;vue-server-renderer&quot;">​</a></h4><p><code>Vue.js</code> <a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noreferrer">服务器端渲染(SSR)</a> 所用。</p><h4 id="vue-template-compiler" tabindex="-1">vue-template-compiler <a class="header-anchor" href="#vue-template-compiler" aria-label="Permalink to &quot;vue-template-compiler&quot;">​</a></h4><p><code>vue-template-compiler</code> 通常与 <a href="https://vue-loader.vuejs.org/zh/" target="_blank" rel="noreferrer">vue-loader</a> 连用，用于将单文件组件 (<code>SFCs</code>)预编译为渲染函数。</p><p><code>vue-template-compiler</code> 作为 <code>compiler</code> 在 <code>vue-loader/lib/index.js</code> 的 <code>parse</code> 方法里传入，（其中会调用 <code>compiler.parseComponent</code>）得到 <code>descriptor</code>，根据 <code>descriptor</code> 可以生成不同模块的 <code>import</code> 请求，然后通过 <code>pitcher</code> 将原 <code>import</code> 请求转化为新的 <code>import</code> 请求，然后根据新的 <code>import</code> 请求执行 <code>js</code>，转化不同模块，其中转化 <code>template</code> 执行 <code>templateLoader.js</code> 时会去依赖 <code>vue-template-compiler</code> 提供 <code>compiler.compile</code> 方法解析。</p><p><a href="https://github.com/xixizhangfe/vue-loader/blob/master/README.md" target="_blank" rel="noreferrer">vue-loader 解析</a></p><h4 id="weex-template-compiler" tabindex="-1">weex-template-compiler <a class="header-anchor" href="#weex-template-compiler" aria-label="Permalink to &quot;weex-template-compiler&quot;">​</a></h4><p><code>weex</code> 相关（略过）</p><h4 id="weex-vue-framework" tabindex="-1">weex-vue-framework <a class="header-anchor" href="#weex-vue-framework" aria-label="Permalink to &quot;weex-vue-framework&quot;">​</a></h4><p><code>weex</code> 相关（略过）</p><h3 id="weex" tabindex="-1">weex <a class="header-anchor" href="#weex" aria-label="Permalink to &quot;weex&quot;">​</a></h3><p><a href="https://weex.apache.org/zh/guide/introduction.html" target="_blank" rel="noreferrer">Weex</a> 是使用流行的 <code>Web</code> 开发体验来开发高性能原生应用的框架，集成的是运行时版本的 <code>Vue</code>。</p><p>加载流程参考：<a href="http://www.zijian.site/?p=131" target="_blank" rel="noreferrer">Weex 加载流程</a>，<a href="https://www.jianshu.com/p/32285c709682" target="_blank" rel="noreferrer">浅说 Weex 工作原理</a></p><h3 id="sfc" tabindex="-1">sfc <a class="header-anchor" href="#sfc" aria-label="Permalink to &quot;sfc&quot;">​</a></h3><p><code>sfc</code> 即单文件组件（<code>Single File Components</code>），执行 <code>sfc</code> 下的 <code>parse.js</code> 里导出的 <code>parseComponent</code> 方法得到 <code>SFCDescriptor</code> 对象。该文件最终会打包到 <code>vue-template-compiler</code> 里。</p><h3 id="test" tabindex="-1">test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;test&quot;">​</a></h3><p>包含 <a href="http://karma-runner.github.io/4.0/index.html" target="_blank" rel="noreferrer">karma</a> 和 <a href="https://jasmine.github.io/" target="_blank" rel="noreferrer">jasmine</a> 两种测试工具。</p><h2 id="开始调试" tabindex="-1">开始调试 <a class="header-anchor" href="#开始调试" aria-label="Permalink to &quot;开始调试&quot;">​</a></h2><p><code>vue</code> 采用 <a href="https://www.rollupjs.com/guide/introduction/" target="_blank" rel="noreferrer">rollup</a> 作为构建工具。</p><p>修改 <code>npm scripts</code> 里的 <code>dev</code> 字段对应的命令，在命令后面增加 <code>--sourcemap</code>，然后执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>此时会在 <code>dist</code> 生成 <code>vue.js</code> 和 <code>vue.js.map</code>，然后在在任意处新增 <code>html</code> 文件，然后 <code>script</code> 标签引入刚生成的 <code>vue.js</code>，然后书写 <code>vue</code> 代码在浏览器打开即可断点到源代码而不是打包后的代码。</p><h3 id="程序入口" tabindex="-1">程序入口 <a class="header-anchor" href="#程序入口" aria-label="Permalink to &quot;程序入口&quot;">​</a></h3><p><code>dev</code> 命令对应的 <code>TARGET</code> 为 <code>web-full-dev</code>，即对应的平台入口为 <code>platforms/web/entry-runtime-with-compiler.js</code>，该文件里面引入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./runtime/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>该文件会从 <code>core/index</code>(他又会从 <code>./instance/index</code> 引入<code>Vue</code>，该文件里会初始化 <code>Vue</code> 的各项，通过传入 <code>Vue</code> 作为参数的方式（<code>Mixin</code>）扩展原型) 里引入 <code>Vue</code>，并进行平台化相关的定制，如扩展了 <code>Vue.options.directives、Vue.options.components</code>。 初始化了 <code>Vue.prototype.__patch__</code> 为 <code>patch</code> 方法，初始化了 <code>Vue.prototype.$mount</code>，该 <code>$mount</code> 会调用 <code>core/instance/lifecycle</code> 里的 <code>mountComponent</code>。</p><p>回到 <code>entry-runtime-with-compiler.js</code> 分析，继续引入：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { compileToFunctions } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./compiler/index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>该文件里执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compileToFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseOptions);</span></span></code></pre></div><p>其中 <code>createCompiler</code> 为 <code>compiler/index</code> 的导出，用于创建编译器。这里传入平台相关的参数 <code>baseOptions</code> 得到对应的 <code>compile，compileToFunctions</code>。<code>compileToFunctions</code> 用于将 <code>template</code> 转化为 <code>render</code> 函数。</p><p>回到 <code>entry-runtime-with-compiler.js</code> 继续分析，重写了 <code>Vue.prototype.$mount</code>，并在方法里末尾执行了原 <code>$mount</code>，然后将 <code>compileToFunctions</code> 赋给了 <code>Vue.compile</code>，最后导出 <code>Vue</code>。</p><h2 id="demo-分析使用编译后的-vue" tabindex="-1">demo 分析使用编译后的 vue <a class="header-anchor" href="#demo-分析使用编译后的-vue" aria-label="Permalink to &quot;demo 分析使用编译后的 vue&quot;">​</a></h2><p>因为 <code>demo</code> 里会涉及到组件引入和其他模块，所以采用 <code>webpack</code> 打包，将 <code>vue</code> 作为 <code>npm</code> 包引入，所以意味着断点将会打到编译后的 <code>vue</code> 的 <code>js</code> 里，后续分析将会在那个文件里进行。</p>`,51),p=[t];function l(h,o,d,r,c,k){return i(),e("div",null,p)}const u=s(n,[["render",l]]);export{g as __pageData,u as default};
