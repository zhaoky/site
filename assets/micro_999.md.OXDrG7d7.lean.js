import{_ as t,c as a,o as l,k as e,a as o}from"./chunks/framework.V_NCB61V.js";const P=JSON.parse('{"title":"微前端","description":"","frontmatter":{},"headers":[],"relativePath":"micro/999.md","filePath":"micro/999.md"}'),n={name:"micro/999.md"},s=e("h1",{id:"微前端",tabindex:"-1"},[o("微前端 "),e("a",{class:"header-anchor",href:"#微前端","aria-label":'Permalink to "微前端"'},"​")],-1),r=e("p",null,"前端已经蓬勃发展了好多年，随着业务的不断迭代，必然就催生了很多“巨大的”SPA 系统，而这时候就微前端就可以大显身手了，它的使用场景主要有下列这些：",-1),c=e("ul",null,[e("li",null,"大型单页应用程序：在一个单一的代码库中开发和维护一个大型单页应用程序可能会变得非常复杂，使用微前端可以将应用程序拆分为更小、更易于管理的部分，从而提高可维护性和可扩展性，提高开发效率和可用性。"),e("li",null,"多个团队合作开发：当多个团队共同开发一个应用程序时，使用微前端可以将应用程序拆分为多个部分，每个团队可以独立地开发和部署自己的部分，从而提高整个团队的效率。"),e("li",null,"多个技术栈的应用程序：当应用程序需要使用不同的技术栈时，使用微前端可以让团队选择最适合自己的技术栈，提高开发效率和可用性。"),e("li",null,"增量升级，在面对各种复杂场景时，通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略。因为是运行时加载，可以在没有重建的情况下添加，删除或替换前端的各个部分。"),e("li",null,"独立运行时，每个微应用之间状态隔离，运行时状态不共享。隔离团队代码，即使所有团队都使用相同的框架，也不要共享运行时。构建自包含的独立应用程序。不要依赖共享状态或全局变量。")],-1),i=e("p",null,"待补充",-1),_=[s,r,c,i];function d(u,h,m,p,f,x){return l(),a("div",null,_)}const $=t(n,[["render",d]]);export{P as __pageData,$ as default};
