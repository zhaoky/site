import{_ as s,c as i,o as a,U as e}from"./chunks/framework.Pf98aJyB.js";const E=JSON.parse('{"title":"源码分析（二）：配置初始化","description":"","frontmatter":{},"headers":[],"relativePath":"code/webpack4/373.md","filePath":"code/webpack4/373.md"}'),p={name:"code/webpack4/373.md"},t=e(`<h1 id="源码分析-二-配置初始化" tabindex="-1">源码分析（二）：配置初始化 <a class="header-anchor" href="#源码分析-二-配置初始化" aria-label="Permalink to &quot;源码分析（二）：配置初始化&quot;">​</a></h1><p>通过在 <code>cli</code> 执行命令 <code>webpack</code> 开始，以 <code>development</code> 模式为例，暂时忽略支线剧情（错误响应，缓存等等），只分析探索 <code>webpack</code> 的打包主流程。</p><h2 id="选择-cli" tabindex="-1">选择 cli <a class="header-anchor" href="#选择-cli" aria-label="Permalink to &quot;选择 cli&quot;">​</a></h2><p>根据 <code>npm</code> 的<a href="https://docs.npmjs.com/files/package.json#bin" target="_blank" rel="noreferrer">规则</a>，<code>cli</code> 执行 <code>webpack</code> 后，就会去执行 <code>node_modules/.bin/webpack</code> 文件即 <code>node_modules/webpack/bin/webpack.js</code>。所以这里我们的 <code>npm scripts</code> 中的 <code>debug</code> 直接调试的 <code>node_modules/.bin/webpack</code> 的代码。 代码中通过:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(packageName);</span></span></code></pre></div><p>判断是否安装了包 <code>webpack-cli</code> 或者 <code>webpack-command</code>，通过安装的数量处理后，执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkgPath), pkg.bin[installedClis[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].binName]));</span></span></code></pre></div><p>即执行 <code>node_modules/webpack-cli/bin/cli.js</code>，</p><h2 id="webpack-cli" tabindex="-1">webpack-cli <a class="header-anchor" href="#webpack-cli" aria-label="Permalink to &quot;webpack-cli&quot;">​</a></h2><p>该文件为一个自执行函数，<code>import-local</code> 包用于优先选用本地包，<code>v8-compile-cache</code> 包用于 <code>v8</code> <a href="https://github.com/flyyang/blog/issues/13" target="_blank" rel="noreferrer">缓存优化</a>。</p><h3 id="配置-yargs" tabindex="-1">配置 yargs <a class="header-anchor" href="#配置-yargs" aria-label="Permalink to &quot;配置 yargs&quot;">​</a></h3><p>接下来配置了 <code>yargs</code>的帮助等信息：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./config/config-yargs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(yargs)；</span></span></code></pre></div><p>在文件 <code>node_modules/webpack-cli/bin/config/config-yargs.js</code> 里可以查阅具体的配置内容。</p><p>然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yargs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.argv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在 <code>yargs.parse</code> 的回调里执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./utils/convert-argv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(argv);</span></span></code></pre></div><h2 id="合并-cli-参数与项目配置参数" tabindex="-1">合并 cli 参数与项目配置参数 <a class="header-anchor" href="#合并-cli-参数与项目配置参数" aria-label="Permalink to &quot;合并 cli 参数与项目配置参数&quot;">​</a></h2><p>进入 <code>convert-argv.js</code>， 主要做了对 <code>cli</code> 所传的参数与项目配置进行融合，并处理部分参数，最终得到一个 <code>options</code>。</p><p>先处理了部分特定参数后（可能会有多个项目配置），然后通过一系列（<code>findup</code>,<code>interpret</code>）的处理，得到配置文件的路径值: <code>/nice/wpDemo/webpack.config.js</code>。然后读取 <code>webpack.config.js</code> 这个文件后，执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processConfiguredOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><p>方法里先对 <code>options</code> 的类型进行了验证：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validateOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span></code></pre></div><p>验证无误后，对项目配置文件进行了一系列的判断，包括是否是多数组，函数等等。最后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span></code></pre></div><p>在该方法里，通过 <code>ifArg</code> 对融合了 <code>cli</code> 参数配置和项目配置（<code>cli</code> 参数优先级更高），包括 <code>mode</code>，<code>entry</code> 等等，然后跳出 <code>processOptions</code> 继续执行，根据 <code>cli</code> 参数有没有 <code>watch</code> 相关而做一些处理。</p><h2 id="统计数据-stats-配置" tabindex="-1">统计数据 stats 配置 <a class="header-anchor" href="#统计数据-stats-配置" aria-label="Permalink to &quot;统计数据 stats 配置&quot;">​</a></h2><p><code>processOptions</code> 执行完后，回到 <code>cli.js</code> 文件执行同名方法 <code>processOptions</code> ，传入了融合了后的配置 <code>options</code>，然后对配置中的统计信息（<code>options.stats</code>）进行了处理。</p><h2 id="webpack-js" tabindex="-1">webpack.js <a class="header-anchor" href="#webpack-js" aria-label="Permalink to &quot;webpack.js&quot;">​</a></h2><p>最后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> webpack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compiler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> webpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里引入了<code>webpack</code>（<code>node_modules/webpack/lib/webpack.js</code>）, <code>webpack</code> 挂载了很多内置的插件，如 <code>BannerPlugin</code> 等等, 然后执行 <code>webpack</code>。</p><p>先通过 <code>ajv</code> 验证配置的每一项是否合法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> webpackOptionsValidationErrors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validateSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(webpackOptionsSchema, options);</span></span></code></pre></div><p>然后判断如果 <code>options</code> 是数组则执行多个<code>webpack(options)</code>，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebpackOptionsDefaulter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span></code></pre></div><h2 id="与合项目默认参数合并" tabindex="-1">与合项目默认参数合并 <a class="header-anchor" href="#与合项目默认参数合并" aria-label="Permalink to &quot;与合项目默认参数合并&quot;">​</a></h2><p>该方法在文件 <code>WebpackOptionsDefaulter.js</code> 里，初始化默认的 <code>config</code> 配置后，然后通过 <code>WebpackOptionsDefaulter</code> 的原始类 <code>OptionsDefaulter</code> 上的 <code>process</code> 方法 <code>merge</code> 了项目配置。然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.context); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// options.context为当前项目绝对路径</span></span></code></pre></div><p><code>options</code> 是系统默认的配置、cli 配置、配置文件配置三种融合的结果，此时<code>项目配置</code>与<code>默认配置</code>都已处理完毕，进入编译前的准备。</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><ol><li><code>webpack</code> 先选择了 <code>cli</code> 后，配置了 <code>yargs</code> 相关信息；</li><li>通过 <code>yarg</code> 解析了 <code>cli</code> 相关参数后，与读取到的配置文件的配置相融合；</li><li>统计数据 <code>stats</code> 配置后，执行方法 <code>webpack</code>，融合了项目配置与默认配置，最终得到 <code>options</code> 挂载到变量 <code>compiler</code> 下。</li></ol>`,43),n=[t];function l(o,c,h,d,k,r){return a(),i("div",null,n)}const y=s(p,[["render",l]]);export{E as __pageData,y as default};
