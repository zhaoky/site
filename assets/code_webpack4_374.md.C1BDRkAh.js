import{_ as i,c as a,o as e,R as n}from"./chunks/framework.CBBA5HFx.js";const c=JSON.parse('{"title":"源码分析（三）：编译前的准备","description":"","frontmatter":{},"headers":[],"relativePath":"code/webpack4/374.md","filePath":"code/webpack4/374.md"}'),l={name:"code/webpack4/374.md"};function p(t,s,h,k,o,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="源码分析-三-编译前的准备" tabindex="-1">源码分析（三）：编译前的准备 <a class="header-anchor" href="#源码分析-三-编译前的准备" aria-label="Permalink to &quot;源码分析（三）：编译前的准备&quot;">​</a></h1><h2 id="compiler-简述" tabindex="-1">Compiler 简述 <a class="header-anchor" href="#compiler-简述" aria-label="Permalink to &quot;Compiler 简述&quot;">​</a></h2><ul><li><code>webpack/lib/Compiler.js</code> 该文件是 <code>webpack</code> 的核心, <code>Compiler</code> 类定义了整个构建的流程;</li><li><code>new Compiler</code> 执行 <code>constructor</code>，首先扩展了 <code>Tapable</code>，在 <code>constructor</code> 里定义了一堆钩子 <code>done,beforeRun,run,emit</code> 等等;</li><li>然后注册了<code>this._pluginCompat.tap(&quot;Compiler&quot;)</code>，这个用来兼容之前的老版 <code>webpack</code> 的 <code>plugin</code> 的钩子，触发时机在<code>tapable/lib/Tapable.js</code>里调用<code>plugin</code> 的时候;</li><li>该 <code>Compiler</code> 类下的的 <code>run</code> 即为整个打包的主流程函数；</li></ul><h2 id="封装-fs" tabindex="-1">封装 FS <a class="header-anchor" href="#封装-fs" aria-label="Permalink to &quot;封装 FS&quot;">​</a></h2><p>继续执行 <code>webpack.js</code>，执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NodeEnvironmentPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  infrastructureLogging: options.infrastructureLogging,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler);</span></span></code></pre></div><p>该类主要对文件系统做了一些封装，包括<code>输入，输出，缓存，监听</code>等等，这些扩展后的方法全部挂载在 <code>compiler</code> 对象下。</p><h2 id="执行-plugins" tabindex="-1">执行 plugins <a class="header-anchor" href="#执行-plugins" aria-label="Permalink to &quot;执行 plugins&quot;">​</a></h2><h3 id="项目配置的-plugins" tabindex="-1">项目配置的 plugins <a class="header-anchor" href="#项目配置的-plugins" aria-label="Permalink to &quot;项目配置的 plugins&quot;">​</a></h3><p>然后对自己 <code>config</code> 文件里的 <code>plugins</code> 进行了注册：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.plugins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.plugins)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.plugins) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler, compiler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，会把 <code>compiler</code> 实例传进去供 <code>plugin</code> 使用，<code>compiler</code> 包含整个构建流程的全部钩子，通过它可以把控整个 <code>webpack</code> 构建周期。其中 <code>compiler</code> 的部分钩子会传入 <code>compilation</code> 对象参数，该对象又包含资源构建的很多钩子。</p><p>掌握流程里各对象（如 <code>compiler</code>，<code>compilation</code>）的事件钩子触发的时机，就是掌握如何写一个插件的关键。<a href="https://webpack.docschina.org/contribute/writing-a-plugin/" target="_blank" rel="noreferrer">如何写一个 webpack 插件？</a></p><p>接着触发了 <code>compiler</code> 的 <code>hooks</code>: <code>environment，afterEnvironment</code>，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebpackOptionsApply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, compiler);</span></span></code></pre></div><h3 id="项目默认的-plugins" tabindex="-1">项目默认的 plugins <a class="header-anchor" href="#项目默认的-plugins" aria-label="Permalink to &quot;项目默认的 plugins&quot;">​</a></h3><p>该 <code>WebpackOptionsApply</code> 类的 <code>process</code> 除了把配置里的一些属性添加到 <code>compiler</code> 对象下，更主要的是根据 <code>options</code> 的配置不同，注册激活一些默认自带的插件和 <code>resolverFactory.hooks</code>，大部分插件的作用是往 <code>compiler.hooks:compilation,thisCompilation</code> 里注册一些事件（此时该钩子已经获取到 <code>normalModuleFactory</code> 等参数），如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JavascriptModulesPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//给normalModuleFactory的js模块提供Parser、JavascriptGenerator对象 ，并给seal阶段的template提供renderManifest数组（包含render方法）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonModulesPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//给normalModuleFactory的json模块提供Parser、JavascriptGenerator对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebAssemblyModulesPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mangleImports: options.optimization.mangleWasmImports,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同理，webassembly模块</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EntryOptionPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.entryOption.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.context, options.entry); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建多入口还是单入口 SingleEntryPlugin | MultiEntryPlugin，两者均会在 apply 方法里注册 Compiler.hooks:compilation, make</span></span></code></pre></div><p>插件处理完毕后，触发 <code>compiler.hooks</code>: <code>afterPlugins</code>。</p><h2 id="注册-resolverfactory-hooks" tabindex="-1">注册 resolverFactory.hooks <a class="header-anchor" href="#注册-resolverfactory-hooks" aria-label="Permalink to &quot;注册 resolverFactory.hooks&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.resolverFactory.hooks.resolveOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;normal&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WebpackOptionsApply&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolveOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fileSystem: compiler.inputFileSystem,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cachedCleverMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.resolve, resolveOptions) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置项 options.resolve</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.resolverFactory.hooks.resolveOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;context&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WebpackOptionsApply&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolveOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fileSystem: compiler.inputFileSystem,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      resolveToContext: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cachedCleverMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.resolve, resolveOptions) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置项 options.resolve</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.resolverFactory.hooks.resolveOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;WebpackOptionsApply&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolveOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fileSystem: compiler.inputFileSystem,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cachedCleverMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.resolveLoader, resolveOptions) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置项 options.resolveLoader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>然后注册 <code>compiler.resolverFactory.hooks</code>: <code>resolveOptions for (normal/context/loader)</code>，目的是为 <code>Factory.createResolver</code> 提供默认的参数对象（含有相关的 <code>resolve</code> 项目配置项）。</p><p>注册完成后，触发 <code>compiler.hooks</code>: <code>afterResolvers</code>，到此 <code>compiler</code> 初始化完毕。</p><h2 id="回到-cli-js" tabindex="-1">回到 cli.js <a class="header-anchor" href="#回到-cli-js" aria-label="Permalink to &quot;回到 cli.js&quot;">​</a></h2><p>回到<code>cli.js</code>，处理配置项 <code>progress</code> 和 <code>infoVerbosity</code>，然后判断 <code>options</code> 里是否有 <code>watch</code>，有则走 <code>compiler.watch</code>，无则走 <code>compiler.run</code>，这里我们走<code>compiler.run</code>，进入 <code>webpack</code> 核心构建流程！</p><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><ol><li>实例化了 <code>Compiler</code>，它扩展于<code>Tapable</code>，是 <code>webapck</code> 的核心；</li><li>封装了输入输出等方法 <code>FS</code> ，然后执行了 <code>plugins</code>（<code>compiler</code> 作为参数），包括项目配置的和项目默认；</li><li>注册 <code>resolverFactory.hooks</code> 用于 <code>Factory.createResolver</code> 方法提供参数对象；</li><li>最后根据配置是否有 <code>watch</code> 来决定程序走向。</li></ol>`,28)]))}const E=i(l,[["render",p]]);export{c as __pageData,E as default};
