import{_ as s,c as i,o as a,U as e}from"./chunks/framework.V_NCB61V.js";const g=JSON.parse('{"title":"源码笔记（七）：mount 阶段生成 dom","description":"","frontmatter":{},"headers":[],"relativePath":"code/vue2/398.md","filePath":"code/vue2/398.md"}'),n={name:"code/vue2/398.md"},t=e(`<h1 id="源码笔记-七-mount-阶段生成-dom" tabindex="-1">源码笔记（七）：mount 阶段生成 dom <a class="header-anchor" href="#源码笔记-七-mount-阶段生成-dom" aria-label="Permalink to &quot;源码笔记（七）：mount 阶段生成 dom&quot;">​</a></h1><h2 id="vnode-渲染为真实-dom" tabindex="-1">vnode 渲染为真实 dom <a class="header-anchor" href="#vnode-渲染为真实-dom" aria-label="Permalink to &quot;vnode 渲染为真实 dom&quot;">​</a></h2><p>接上文，<code>vm._render</code> 通过 <code>render</code> 生成 <code>vnode</code> 后，然后执行 <code>vm._update(vm._render(),hydrating)</code> 来首次渲染成真实 <code>dom</code>，里面执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prevVnode) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // initial render</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.$el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__patch__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm.$el, vnode, hydrating, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* removeOnly */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // updates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.$el </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__patch__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prevVnode, vnode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此处为初始渲染，执行第一个分支 <code>vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);</code> 即执行 <code>patch</code>。</p><p><code>patch</code> 中因为 <code>oldVnode</code> 即 <code>vm.$el</code> 是真实节点，则 <code>oldVnode</code> 替换为空 <code>vnode</code>，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, insertedVnodeQueue, oldElm._leaveCb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parentElm, nodeOps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextSibling</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(oldElm));</span></span></code></pre></div><h3 id="createelm" tabindex="-1">createElm <a class="header-anchor" href="#createelm" aria-label="Permalink to &quot;createElm&quot;">​</a></h3><p><code>createElm</code> 主要逻辑：</p><ul><li>是组件 <code>vnode</code>，则在 <code>createComponent</code> 处理</li><li>不是组件 <code>vnode</code><ul><li>是元素节点的 <code>vnode</code>，则创建该标签并设置 <code>css scope</code>，然后通过 <code>createChildren</code> 循环构建子 <code>vnode</code>，然后触发 <code>invokeCreateHooks</code> 处理标签的属性</li><li>是注释节点的 <code>vnode</code>，则创建注释节点</li><li>其他情况就创建文件节点</li><li>最后将创建的真实节点插入到根节点里</li></ul></li></ul><h3 id="createchildren" tabindex="-1">createChildren <a class="header-anchor" href="#createchildren" aria-label="Permalink to &quot;createChildren&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createChildren</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, children, insertedVnodeQueue);</span></span></code></pre></div><p><code>createChildren</code> 标志开始构建子 <code>vnode</code>。方法里先通过 <code>checkDuplicateKeys</code> 检查 <code>key</code> 是否重复，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  createElm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(children[i], insertedVnodeQueue, vnode.elm, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, children, i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>即递归对每一个子 <code>vnode</code> 执行 <code>createElm</code>。</p><h3 id="invokecreatehooks" tabindex="-1">invokeCreateHooks <a class="header-anchor" href="#invokecreatehooks" aria-label="Permalink to &quot;invokeCreateHooks&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // \`data\` 为：\`{ref: &quot;btn&quot;, staticClass: &quot;side&quot;, on: {click: ƒ}}\`。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  invokeCreateHooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>invokeCreateHooks</code> 处理该 <code>vnode</code> 上的 <code>data</code> 属性，里循环调用 <code>cbs.create</code> 数组里的 8 个方法如 <code>updateAttrs，updateClass，updateDOMListeners</code> 等，做一些 <code>style，class，event，$refs</code> 等相关的处理。如果是组件 <code>vnode</code> 且有 <code>insert</code> 方法则将该组件 <code>vnode</code> <code>push</code> 到 <code>insertedVnodeQueue</code>。</p><p><code>insertedVnodeQueue</code> 记录子节点组件创建顺序的队列。每创建一个组件实例就会往这个队列中插入当前的组件节点 <code>VNode</code>, 当整个 <code>VNode</code> 对象全部转换成为真实的 <code>DOM</code> 树时，会依次调用这个队列中的 <code>VNode hook</code> 的 <code>insert</code> 方法。</p><h3 id="invokeinserthook" tabindex="-1">invokeInsertHook <a class="header-anchor" href="#invokeinserthook" aria-label="Permalink to &quot;invokeInsertHook&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invokeInsertHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">initial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isDef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode.parent)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vnode.parent.data.pendingInsert </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queue.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      queue[i].data.hook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(queue[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>暂时不考虑服务端渲染，<code>invokeInsertHook</code> 钩子在 <code>patch</code> 方法的最后执行。如果是新建的组件实例 <code>vnode</code>（如未挂载、组件实例）且有父 <code>vnode</code>，则将 <code>queue</code> 即之前的 <code>insertedVnodeQueue</code> 队列存到父 <code>vnode</code> 上的 <code>data.pendingInsert</code> 上，在 <code>initComponent</code> 时，会把其 <code>push</code> 到 <code>insertedVnodeQueue</code>。</p><p>如果不是，则就依次调用每个组件 <code>vnode</code> 的 <code>insert</code> 方法，如果组件还未 <code>mounted</code>，则触发 <code>mounted</code> 钩子，如果是 <code>keepAlive</code> 包裹的组件，则执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vnode.data.keepAlive) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (context._isMounted) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //已装载好，说明在更新，将 componentInstance push 到 activatedChildren</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //后面组件更新结束后，在 flushSchedulerQueue 执行 callActivatedHooks，即遍历整个activatedChildren队列 执行 activateChildComponent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        queueActivatedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(componentInstance);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //触发子元素的 activated 钩子和自己的 activated 钩子。同理，keep-alive 的 deactivated 钩子原理一致</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        activateChildComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(componentInstance, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span></code></pre></div><h3 id="分析-demo" tabindex="-1">分析 demo <a class="header-anchor" href="#分析-demo" aria-label="Permalink to &quot;分析 demo&quot;">​</a></h3><p>对于本例：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 节点 1 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Bpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Bpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 节点 2 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-on:click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;info.name:{{info.name}}，计算属性:{{compute}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 节点 3 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">App</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-bind:num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info.age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 节点 4 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-on:click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hide&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;====点击让第二个App组件卸载====&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 节点 5 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">App</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isShow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>除开 4 个空节点和一个异步组件占位的空注释节点，还有 4 个子节点。</p><p>接下来逐个分析创建流程：</p><ol><li>创建 4 个空节点，即在 <code>createElm</code> 里直接执行 <code>createTextNode</code> 生成空的文本节点后插入到对应的位置,下面的节点分析将略过空节点；</li><li>创建第一个节点（称为节点 1，下一个就为节点 2，以此类推）异步占位节点，即在 <code>createElm</code> 里直接执行 <code>createComment</code> 生成空的注释节点后插入到对应的位置；</li><li>创建节点 2，同前面逻辑一样走 <code>createElm -&gt; createChildren -&gt; createElm -&gt; createChildren ···</code>，递归执行 <code>createElm</code> 判断到 <code>tag</code> 为空，则执行 <code>createTextNode</code> 创建文本节点 <code>info.name:korey，计算属性:29</code> 并调 <code>insert</code> 插入到父节点。然后回到节点 2 的 <code>createElm</code> 继续执行 <code>invokeCreateHooks</code>，然后调 <code>insert</code> 插入到父节点即根组件的 <code>div</code>，此时生成的 <code>dom</code> 节点都赋值在各自 <code>vnode.elm</code> 下；</li><li>创建节点 3，<code>vnode</code> 为 <code>App</code> 组件节点，在 <code>createElm</code> 里走 <code>createComponent</code> 方法。下面单独分析；</li><li>创建节点 4，与节点 2 一致；</li><li>创建节点 5，与节点 3 一致；</li></ol><h2 id="组件-vnode-渲染为真实-dom" tabindex="-1">组件 vnode 渲染为真实 dom <a class="header-anchor" href="#组件-vnode-渲染为真实-dom" aria-label="Permalink to &quot;组件 vnode 渲染为真实 dom&quot;">​</a></h2><p>组件节点在 <code>createElm</code> 里走 <code>createComponent</code>。因为组件 <code>vnode.data</code> 有 <code>hook.init</code> 等渲染 <code>vnode</code> 时安装的钩子函数，故执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* hydrating */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//其中 i 为 componentVNodeHooks.init</span></span></code></pre></div><h3 id="实例化子组件" tabindex="-1">实例化子组件 <a class="header-anchor" href="#实例化子组件" aria-label="Permalink to &quot;实例化子组件&quot;">​</a></h3><p>执行 <code>componentVNodeHooks.init</code>，方法里先判断如果存在已被 <code>keep-alive</code> 缓存的组件实例 <code>vnode.componentInstance</code>，则调用 <code>componentVNodeHooks.prepatch</code> 直接 <code>updateChildComponent</code> 更新子组件实例即可，就不用去初始化和装载子组件，即不会走一系列常规生命周期钩子。否则执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vnode.componentInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createComponentInstanceForVnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, activeInstance));</span></span></code></pre></div><p><code>createComponentInstanceForVnode</code> 用于创建 <code>component</code> 实例。</p><p>方法里执行：<code>new vnode.componentOptions.Ctor(options)</code>，即实例化 <code>VueComponent</code>，内部执行 <code>this._init(options)</code> 即原型链上的 <code>Vue</code> 的方法 <code>_init</code>，到此，<code>App</code> 子组件开始走 <code>vue</code> 的 <code>init</code> 流程（具体与 <code>Vue</code> 实例化差异可以参考第一章分析），触发 <code>App beforeCreate 钩子-&gt;App created 钩子</code>，然后执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vm.$options.el) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm.$options.el);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因 <code>vm.$options.el</code> 不存在，所以子组件的 <code>_init</code> 的执行结束（即子组件实例化完成），将子组件实例赋给 <code>vnode.componentInstance</code> 即 <code>child</code>。</p><h3 id="构建子组件" tabindex="-1">构建子组件 <a class="header-anchor" href="#构建子组件" aria-label="Permalink to &quot;构建子组件&quot;">​</a></h3><p>回到 <code>componentVNodeHooks.init</code> 继续执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hydrating </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode.elm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hydrating);</span></span></code></pre></div><p>执行 <code>child.$mount</code> 即原型链上的 <code>Vue</code> 的方法 <code>$mount</code>。因为存在 <code>render</code>，故触发 <code>App beforeMount 钩子</code> 后，直接进入 <code>mount</code> 阶段。</p><p>前面已分析，在实例化 <code>渲染 watcher</code> 里触发 <code>updateComponent</code> 先执行 <code>vm._render</code> 生成 <code>vnode</code>：</p><h4 id="子组件-render-函数" tabindex="-1">子组件 render 函数 <a class="header-anchor" href="#子组件-render-函数" aria-label="Permalink to &quot;子组件 render 函数&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vm.$createElement;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vm._self._c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _h;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { attrs: { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [_vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_vm.num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;num:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _vm.num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      _c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Child&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { staticClass: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>生成 <code>vnode</code> 后，执行 <code>vm._update</code> 渲染成真实 <code>dom</code>。在 <code>patch</code> 方法里，由于 <code>oldVnode</code> 即 <code>vm.$el</code> 不存在，执行 <code>createElm-&gt;createChildren-&gt;··</code> 递归生成每一个 <code>vnode</code> 及其子 <code>vnode</code> 对应的真实 <code>dom</code>。</p><h3 id="构建孙组件" tabindex="-1">构建孙组件 <a class="header-anchor" href="#构建孙组件" aria-label="Permalink to &quot;构建孙组件&quot;">​</a></h3><p>在子组件 <code>App</code> 的 <code>render</code> 函数里，创建孙组件 <code>Child</code>。与子组件流程一致，他同样会经历 <code>App</code> 组件的构建逻辑（触发 <code>Child beforeCreate-&gt;Child created-&gt;Child beforeMount</code> 钩子），执行 <code>vm._update</code> 渲染成真实 <code>dom</code>， 通过 <code>createElm-&gt;createChildren-&gt;··</code> 递归在其各层 <code>vnode</code> 里得到对应的 <code>vnode.elm</code>。</p><p>在孙组件 <code>Child</code> 里的根节点时（<code>createElm</code> 里），由于没有父节点 <code>parentElm</code>，所以执行 <code>insert</code> 时，不会插入节点。</p><p>然后回到 <code>patch</code> 触发 <code>invokeInsertHook</code>（此时不存在 <code>insertedVnodeQueue</code>），然后返回 <code>vnode.elm</code>（<code>vnode</code> 为 <code>Child</code> 组件根 <code>vnode</code>） 赋给 <code>vm.$el</code>（<code>vm</code> 为 <code>Child</code> 组件实例）。回到 <code>mountComponent</code> 中返回孙组件实例， <code>Child</code> 构建完毕。</p><h2 id="真实-dom-插入到文档" tabindex="-1">真实 dom 插入到文档 <a class="header-anchor" href="#真实-dom-插入到文档" aria-label="Permalink to &quot;真实 dom 插入到文档&quot;">​</a></h2><h3 id="孙组件-dom-插入到子组件-dom" tabindex="-1">孙组件 dom 插入到子组件 dom <a class="header-anchor" href="#孙组件-dom-插入到子组件-dom" aria-label="Permalink to &quot;孙组件 dom 插入到子组件 dom&quot;">​</a></h3><p>回到 <code>createComponent</code> 方法里继续执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode.componentInstance)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  initComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parentElm, vnode.elm, refElm);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isReactivated)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    reactivateComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, insertedVnodeQueue, parentElm, refElm);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="initcomponent" tabindex="-1">initComponent <a class="header-anchor" href="#initcomponent" aria-label="Permalink to &quot;initComponent&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vnode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">insertedVnodeQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode.data.pendingInsert)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    insertedVnodeQueue.push.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(insertedVnodeQueue, vnode.data.pendingInsert);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vnode.data.pendingInsert </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vnode.elm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode.componentInstance.$el;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPatchable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    invokeCreateHooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode, insertedVnodeQueue);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    registerRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// make sure to invoke the insert hook</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    insertedVnodeQueue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vnode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>initComponent</code> 里, <code>vnode</code> 为 <code>Child</code> 组件 <code>vnode</code>。若<code>vnode.data.pendingInsert</code> 存在（存在说明有子组件 <code>vnode</code> <code>push</code> 进入）则与 <code>insertedVnodeQueue</code> 合并，然后将 <code>Child</code> 组件实例生成的真实 <code>dom</code> 节点 <code>vnode.componentInstance.$el</code> 赋给 <code>Child</code> 组件 <code>vnode.elm</code> 上。</p><p>然后判断如果 <code>Child</code> 组件实例 <code>vnode</code> 有标签，则执行 <code>invokeCreateHooks</code>（此处会把 <code>Child</code> 组件 <code>vnode</code> <code>push</code> 到 <code>insertedVnodeQueue</code>）和 <code>setScope</code>。</p><p><code>initComponent</code> 执行完成后，此时调用 <code>insert</code> 将 <code>vnode.elm</code> 插入到 <code>App</code> 组件对应的 <code>dom</code> 上。到此 <code>Child</code> 孙组件渲染结束。</p><h3 id="子组件-dom-插入到根组件-dom" tabindex="-1">子组件 dom 插入到根组件 dom <a class="header-anchor" href="#子组件-dom-插入到根组件-dom" aria-label="Permalink to &quot;子组件 dom 插入到根组件 dom&quot;">​</a></h3><p>父级即 <code>App</code> 组件的 <code>children</code> 渲染循环也结束，然后回到 <code>patch</code> 触发 <code>invokeInsertHook</code> 将 <code>insertedVnodeQueue</code> 存入 <code>vnode.parent.data.pendingInsert</code>，然后返回 <code>vnode.elm</code>（<code>vnode</code> 为 <code>App</code> 组件根 <code>vnode</code>） 赋给 <code>vm.$el</code>（<code>vm</code> 为 <code>App</code> 组件实例）。回到 <code>mountComponent</code> 中返回子组件实例， <code>App</code> 构建完毕。</p><p>同 <code>Child</code> 的流程一致，回到 <code>createComponent</code> 方法执行了 <code>initComponent</code> 后，此时调用 <code>insert</code> 将 <code>vnode.elm</code> 插入到根组件对应的 <code>dom</code> 上。到此，<code>App</code> 组件渲染结束。</p><h2 id="整体生命周期" tabindex="-1">整体生命周期 <a class="header-anchor" href="#整体生命周期" aria-label="Permalink to &quot;整体生命周期&quot;">​</a></h2><p>根组件下的 <code>createChildren</code> 里继续循环 <code>createElm</code>，遇到下一个 <code>App</code> 组件的构建 <code>dom</code> 跟之前的逻辑一样，其中构造函数复用。</p><p>待到根组件的 <code>createChildren</code> 里渲染循环也结束，在 <code>createElm</code> 里因为有 <code>parentElm</code> 为 <code>body</code> 节点，所以执行 <code>insert</code> 将整个父组件 <code>vnode.elm</code> 插入到 <code>body</code> 元素中。</p><p>回到 <code>patch</code> 方法里继续执行，删掉老的 <code>dom</code> 节点，然后触发 <code>invokeInsertHook</code>，此时 <code>insertedVnodeQueue</code> 里包含之前按顺序 <code>push</code> 进去的 4 个组件 <code>vnode</code>：</p><ol><li>第一个孙组件 <code>Child</code></li><li>第一个子组件 <code>App</code></li><li>第二个孙组件 <code>Child</code></li><li>第二个子组件 <code>App</code></li></ol><p>循环依次执行 <code>insert</code> 钩子，方法里会触发各组件生命周期钩子：<code>mounted</code>。</p><p>然后 <code>patch</code> 方法返回 <code>vnode.elm</code> 赋给根实例 <code>vm.$el</code>, <code>vm._update</code> 执行结束，实例化渲染 <code>watcher</code> 亦结束。</p><p>然后回到 <code>mountComponent</code> 继续执行：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>触发生命周期钩子 <code>mounted</code>。在这之后，异步组件才加载结束，开始构建异步组件的生命周期（上一篇文章的异步组件第二阶段已分析），构建完成后，<code>Vue</code> 初始化全部完成。</p><p>整个过程中，生命周期顺序为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载 Vue ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue beforeMount</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载第一个 App 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App one created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App one beforeMount</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载第一个 App 内的 Child 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child beforeMount</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载第二个 App 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App two created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App two beforeMount</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载第二个 App 内的 Child 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child beforeMount</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用 invokeInsertHook 依次触发各组件 mounted</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一个 App 内的 Child 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child mounted</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一个 App 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App one mounted</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第二个 App 内的 Child 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Child mounted</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第二个 App 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">App two mounted</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Vue加载完成 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue mounted</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始加载异步 Bpp 组件 ↓↓</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue beforeUpdate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async Bpp beforeCreate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async Bpp created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async Bpp beforeMount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">async Bpp mounted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue updated</span></span></code></pre></div><h2 id="本章小结" tabindex="-1">本章小结 <a class="header-anchor" href="#本章小结" aria-label="Permalink to &quot;本章小结&quot;">​</a></h2><ol><li>本章介绍了 <code>vue</code> 执行的 <code>Mount</code> 阶段中的通过 <code>vnode</code> 渲染为真实 <code>dom</code> 部分。</li><li>同时分析了组件里子组件，孙组件的渲染过程以及如何将渲染结果 <code>dom</code> 添加到对应的组件 <code>vnode</code> 上。</li><li>分析了 <code>Vue</code> 的整体生命周期。</li></ol>`,78),l=[t];function p(h,d,k,o,c,E){return a(),i("div",null,l)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
