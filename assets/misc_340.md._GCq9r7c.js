import{_ as e,c as o,o as c,U as i,bg as d,bh as a,bi as s,bj as t,bk as p,bl as k,bm as h,bn as n}from"./chunks/framework.H2RWGpQP.js";const _=JSON.parse('{"title":"cookie 浅析（转）","description":"","frontmatter":{},"headers":[],"relativePath":"misc/340.md","filePath":"misc/340.md"}'),l={name:"misc/340.md"},r=i('<h1 id="cookie-浅析-转" tabindex="-1">cookie 浅析（转） <a class="header-anchor" href="#cookie-浅析-转" aria-label="Permalink to &quot;cookie 浅析（转）&quot;">​</a></h1><blockquote><p>原文链接：<code>https://segmentfault.com/a/1190000004556040</code></p></blockquote><h2 id="我们看到的-cookie" tabindex="-1">我们看到的 cookie <a class="header-anchor" href="#我们看到的-cookie" aria-label="Permalink to &quot;我们看到的 cookie&quot;">​</a></h2><p>在 <code>chrome</code> 浏览器中打开这个网站，进入开发者模式，点击 <code>Resources 栏</code> -&gt; 选择 <code>cookies</code>，我们会看到如下图所示的界面：</p><p><img src="'+d+'" alt="chrome resources"></p><p>在这个网页 <code>http://ppsc.sankuai.com</code> 中我设置了几个<code>cookie</code>：<code>JSSESSIONID，PA_VTIME，skmtutc，test</code>。</p><p>解释一下：左边栏 <code>Cookies</code> 下方会列举当前网页中设置过 <code>cookie</code> 的域都有哪些。上图中只有一个域，即“<code>ppsc.sankuai.com</code>”。而右侧区域显示的就是某个域下具体的 <code>cookie</code> 列表，对应上图就是“<code>ppsc.sankuai.com</code>”域下设置的 4 个 <code>cookie</code>。</p><p>在这个网页中我往 <code>http://ppsc.sankuai.com/getList</code> 接口发了一个 <code>Ajax</code> 请求，<code>request header</code> 如下图所示：</p><p><img src="'+a+'" alt="request header"></p><p>从上图中我们会看到 <code>request header</code> 中自动添加了 <code>Cookie</code> 字段（我并没有手动添加这个字段哦~），<code>Cookie</code> 字段的值其实就是我设置的那 4 个 <code>cookie</code>。这个请求最终会发送到 <code>http://ppsc.sankuai.com</code> 这个服务器上，这个服务器就能从接收到的 <code>request header</code> 中提取那 4 个 <code>cookie</code>。</p><p>上面两张图展示了 <code>cookie</code> 的基本通信流程：<code>设置 cookie</code> =&gt; <code>cookie 被自动添加到 request header 中</code> =&gt; <code>服务端接收到 cookie</code>。这个流程中有几个问题需要好好研究：</p><ul><li>什么样的数据适合放在 <code>cookie</code> 中？</li><li><code>cookie</code> 是怎么设置的？</li><li><code>cookie</code> 为什么会自动加到 <code>request header</code> 中？</li><li><code>cookie</code> 怎么增删查改？</li></ul><p>我们要带着这几个问题继续往下阅读。</p><h2 id="cookie-是怎么工作的" tabindex="-1">cookie 是怎么工作的 <a class="header-anchor" href="#cookie-是怎么工作的" aria-label="Permalink to &quot;cookie 是怎么工作的&quot;">​</a></h2><p>首先必须明确一点，存储 <code>cookie</code> 是浏览器提供的功能。<code>cookie</code> 其实是存储在浏览器中的纯文本，浏览器的安装目录下会专门有一个 <code>cookie</code> 文件夹来存放各个域下设置的 <code>cookie</code>。</p><p>当网页要发 <code>http</code> 请求时，浏览器会先检查是否有相应的 <code>cookie</code>，有则自动添加在 <code>request header</code> 中的 <code>cookie</code> 字段中。这些是浏览器自动帮我们做的，而且每一次 <code>http</code> 请求浏览器都会自动帮我们做。这个特点很重要，因为这关系到“什么样的数据适合存储在 <code>cookie</code> 中”。</p><p>存储在 <code>cookie</code> 中的数据，每次都会被浏览器自动放在 <code>http</code> 请求中，如果这些数据并不是每个请求都需要发给服务端的数据，浏览器这设置自动处理无疑增加了网络开销；但如果这些数据是每个请求都需要发给服务端的数据（比如身份认证信息），浏览器这设置自动处理就大大免去了重复添加操作。所以对于那设置“每次请求都要携带的信息（最典型的就是身份认证信息）”就特别适合放在 <code>cookie</code> 中，其他类型的数据就不适合了。</p><p>但在 <code>localStorage</code> 出现之前，<code>cookie</code> 被滥用当做了存储工具。什么数据都放在 <code>cookie</code> 中，即使这些数据只在页面中使用而不需要随请求传送到服务端。当然 <code>cookie</code> 标准还是做了一些限制的：每个域名下的 <code>cookie</code> 的大小最大为 4KB，每个域名下的 <code>cookie</code> 数量最多为 20 个（但很多浏览器厂商在具体实现时支持大于 20 个）。</p><h2 id="cookie-的格式" tabindex="-1">cookie 的格式 <a class="header-anchor" href="#cookie-的格式" aria-label="Permalink to &quot;cookie 的格式&quot;">​</a></h2><h3 id="document-cookie" tabindex="-1">document.cookie <a class="header-anchor" href="#document-cookie" aria-label="Permalink to &quot;document.cookie&quot;">​</a></h3><p><code>JS</code> 原生的 <code>API</code> 提供了获取 <code>cookie</code> 的方法：<code>document.cookie</code>（注意，这个方法只能获取非 <code>HttpOnly</code> 类型的 <code>cookie</code>）。在 <code>console</code> 中执行这段代码可以看到结果如下图：</p><p><img src="'+s+'" alt="document.cookie"></p><p>打印出的结果是一个字符串类型，因为 <code>cookie</code> 本身就是存储在浏览器中的字符串。但这个字符串是有格式的，由键值对 <code>key=value</code> 构成，键值对之间由一个分号和一个空格隔开。</p><h3 id="cookie-的属性选项" tabindex="-1">cookie 的属性选项 <a class="header-anchor" href="#cookie-的属性选项" aria-label="Permalink to &quot;cookie 的属性选项&quot;">​</a></h3><p>每个 <code>cookie</code> 都有一定的属性，如什么时候失效，要发送到哪个域名，哪个路径等等。这些属性是通过 <code>cookie</code> 选项来设置的，<code>cookie</code> 选项包括：<code>expires、domain、path、secure、HttpOnly</code>。在设置任一个 <code>cookie</code> 时都可以设置相关的这些属性，当然也可以不设置，这时会使用这些属性的默认值。在设置这些属性时，属性之间由一个分号和一个空格隔开。代码示例如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    &quot;key=name; expires=Thu, 25 Feb 2016 04:18:00 GMT; domain=ppsc.sankuai.com; path=/; secure; HttpOnly&quot;</span></span></code></pre></div><h4 id="expires" tabindex="-1">expires <a class="header-anchor" href="#expires" aria-label="Permalink to &quot;expires&quot;">​</a></h4><p><code>expires</code> 选项用来设置 <code>cookie</code> 什么时间内有效”。已被 <code>max-age</code> 代替。<code>expires</code> 其实是 <code>cookie</code> 失效日期，<code>expires</code> 必须是 <code>GMT</code> 格式的时间（可以通过 <code>new Date().toGMTString()</code>或者 <code>new Date().toUTCString()</code> 来获得）。</p><p>如 <code>expires=Thu, 25 Feb 2016 04:18:00 GMT</code> 表示 <code>cookie</code> 将在 <code>2016 年 2 月 25 日 4:18 分</code> 之后失效，对于失效的 <code>cookie</code> 浏览器会清空。如果没有设置该选项，则默认有效期为 <code>session</code>，即会话 <code>cookie</code>。这种 <code>cookie</code> 在浏览器关闭后就没有了。</p><blockquote><p>expires 是 http/1.0 协议中的选项，在新的 http/1.1 协议中 expires 已经由 max-age 选项代替，两者的作用都是限制 cookie 的有效时间。expires 的值是一个时间点（cookie 失效时刻= expires），而 max-age 的值是一个以秒为单位时间段（cookie 失效时刻= 创建时刻+ max-age）。 另外，max-age 的默认值是 -1(即有效期为 session )；若 max-age 有三种可能值：负数、0、正数。负数：有效期 session；0：删除 cookie；正数：有效期为创建时刻+ max-age</p></blockquote><h4 id="domain-和-path" tabindex="-1">domain 和 path <a class="header-anchor" href="#domain-和-path" aria-label="Permalink to &quot;domain 和 path&quot;">​</a></h4><p><code>domain</code> 是域名，<code>path</code> 是路径，两者加起来就构成了 <code>URL</code>，<code>domain</code> 和 <code>path</code> 一起来限制 <code>cookie</code> 能被哪些 <code>URL</code> 访问。</p><p>一句话概括：某 <code>cookie</code> 的 <code>domain</code> 为 <code>baidu.com</code>, <code>path</code> 为 <code>/</code>，若请求的 <code>URL</code> (<code>URL</code> 可以是 <code>js/html/img/css</code> 资源请求，但不包括 <code>XHR</code> 请求)的域名是 <code>baidu.com</code> 或其子域如 <code>api.baidu.com</code>、<code>dev.api.baidu.com</code>，且 <code>URL</code> 的路径是<code>/</code> 或子路径<code>/home</code>、<code>/home/login</code>，则浏览器会将此 <code>cookie</code> 添加到该请求的 <code>cookie</code> 头部中。</p><p>所以 <code>domain</code> 和 <code>path2</code> 个选项共同决定了 <code>cookie</code> 何时被浏览器自动添加到请求头部中发送出去。如果没有设置这两个选项，则会使用默认值。<code>domain</code> 的默认值为设置该 <code>cookie</code> 的网页所在的域名，<code>path</code> 默认值为设置该 <code>cookie</code> 的网页所在的目录。</p><p><code>domain</code> 属性可以使多个 <code>web</code> 服务器共享 <code>cookie</code>。<code>domain</code> 属性的默认值是创建 <code>cookie</code> 的网页所在服务器的主机名。不能将一个 <code>cookie</code> 的域设置成服务器所在的域之外的域。</p><p>例如让位于 <code>order.example.com</code> 的服务器能够读取 <code>catalog.example.com</code> 设置的 <code>cookie</code> 值。如果 <code>catalog.example.com</code> 的页面创建的 <code>cookie</code> 把自己的 <code>path</code> 属性设置为 <code>“/”</code>，把 <code>domain</code> 属性设置成 <code>“.example.com”</code>，那么所有位于 <code>catalog.example.com</code> 的网页和所有位于 <code>orlders.example.com</code> 的网页，以及位于 <code>example.com</code> 域的其他服务器上的网页都可以访问这个 <code>cookie</code>。</p><blockquote><p><strong>特别说明 1：</strong> 发生跨域 xhr 请求时，即使请求 URL 的域名和路径都满足 cookie 的 domain 和 path，默认情况下 cookie 也不会自动被添加到请求头部中。若想知道原因请阅读本文最后一节） <strong>特别说明 2：</strong> domain 是可以设置为页面本身的域名（本域），或页面本身域名的父域，但不能是公共后缀 public suffix。举例说明下：如果页面域名为 www.baidu.com, domain 可以设置为“www.baidu.com”，也可以设置为“baidu.com”，但不能设置为“.com”或“com”。</p></blockquote><h4 id="secure" tabindex="-1">secure <a class="header-anchor" href="#secure" aria-label="Permalink to &quot;secure&quot;">​</a></h4><p><code>secure</code> 选项用来设置 <code>cookie</code> 只在确保安全的请求中才会发送。当请求是 <code>HTTPS</code> 或者其他安全协议时，包含 <code>secure</code> 选项的 <code>cookie</code> 才能被发送至服务器。</p><p>默认情况下，<code>cookie</code> 不会带 <code>secure</code> 选项(即为空)。所以默认情况下，不管是 <code>HTTPS</code> 协议还是 <code>HTTP</code> 协议的请求，<code>cookie</code> 都会被发送至服务端。但要注意一点，<code>secure</code> 选项只是限定了在安全情况下才可以传输给服务端，但并不代表你不能看到这个 <code>cookie</code>。</p><p>下面我们设置一个 <code>secure</code> 类型的 <code>cookie</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=huang; secure&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>之后你就能在控制台中看到这个 <code>cookie</code> 了，如下图所示：</p><p><img src="'+t+'" alt="cookie"></p><blockquote><p>这里有个坑需要注意下： 如果想在客户端即网页中通过 js 去设置 secure 类型的 cookie，必须保证网页是 https 协议的。在 http 协议的网页中是无法设置 secure 类型 cookie 的。</p></blockquote><h4 id="httponly" tabindex="-1">httpOnly <a class="header-anchor" href="#httponly" aria-label="Permalink to &quot;httpOnly&quot;">​</a></h4><p>这个选项用来设置 <code>cookie</code> 是否能通过 <code>js</code> 去访问。默认情况下，<code>cookie</code> 不会带 <code>httpOnly</code> 选项(即为空)，所以默认情况下，客户端是可以通过 <code>js</code> 代码去访问（包括读取、修改、删除等）这个 <code>cookie</code> 的。当 <code>cookie</code> 带 <code>httpOnly</code> 选项时，客户端则无法通过 <code>js</code> 代码去访问（包括读取、修改、删除等）这个 <code>cookie</code>。</p><p>在客户端是不能通过 <code>js</code> 代码去设置一个 <code>httpOnly</code> 类型的 <code>cookie</code> 的，这种类型的 <code>cookie</code> 只能通过服务端来设置。</p><p>那我们在页面中怎么知道哪些 <code>cookie</code> 是 <code>httpOnly</code> 类型的呢？看下图：</p><p><img src="'+p+'" alt="httpOnly"></p><p>凡是 <code>httpOnly</code> 类型的 <code>cookie</code>，其 <code>HTTP</code> 一列都会打上 <code>√</code>，如上图中的 <code>PA_VTIME</code>。你通过 <code>document.cookie</code> 是不能获取的，也不能修改 <code>PA_VTIME</code> 的。</p><blockquote><p>——httpOnly 与安全</p><p>从上面介绍中，大家是否会有这样的疑问：为什么我们要限制客户端去访问 cookie？其实这样做是为了保障安全。</p><p>试想：如果任何 cookie 都能被客户端通过 document.cookie 获取会发生什么可怕的事情。当我们的网页遭受了 XSS 攻击，有一段恶意的 script 脚本插到了网页中。这段 script 脚本做的事情是：通过 document.cookie 读取了用户身份验证相关的 cookie，并将这些 cookie 发送到了攻击者的服务器。攻击者轻而易举就拿到了用户身份验证信息，于是就可以摇摇大摆地冒充此用户访问你的服务器了（因为攻击者有合法的用户身份验证信息，所以会通过你服务器的验证）。</p></blockquote><h2 id="如何设置-cookie" tabindex="-1">如何设置 cookie <a class="header-anchor" href="#如何设置-cookie" aria-label="Permalink to &quot;如何设置 cookie&quot;">​</a></h2><p>知道了 <code>cookie</code> 的格式，<code>cookie</code> 的属性选项，接下来我们就可以设置 <code>cookie</code> 了。首先得明确一点：<code>cookie</code> 既可以由服务端来设置，也可以由客户端来设置。</p><h3 id="服务端设置-cookie" tabindex="-1">服务端设置 cookie <a class="header-anchor" href="#服务端设置-cookie" aria-label="Permalink to &quot;服务端设置 cookie&quot;">​</a></h3><p>不管你是请求一个资源文件（如 <code>html/js/css/图片</code>），还是发送一个 <code>ajax</code> 请求，服务端都会返回 <code>response</code>。而 <code>response header</code> 中有一项叫 <code>set-cookie</code>，是服务端专门用来设置 <code>cookie</code> 的。如下图所示，服务端返回的 <code>response header</code> 中有 5 个 <code>set-cookie</code> 字段，每个字段对应一个 <code>cookie</code>（注意不能将多个 <code>cookie</code> 放在一个 <code>set-cookie</code> 字段中），<code>set-cookie</code> 字段的值就是普通的字符串，每个 <code>cookie</code> 还设置了相关属性选项。</p><p><img src="'+k+'" alt="set-Cookie"></p><p>注意：</p><ul><li>一个 <code>set-Cookie</code> 字段只能设置一个 <code>cookie</code>，当你要想设置多个 <code>cookie</code>，需要添加同样多的 <code>set-Cookie</code> 字段。</li><li>服务端可以设置 <code>cookie</code> 的所有选项：<code>expires、domain、path、secure、HttpOnly</code></li></ul><h3 id="客户端设置-cookie" tabindex="-1">客户端设置 cookie <a class="header-anchor" href="#客户端设置-cookie" aria-label="Permalink to &quot;客户端设置 cookie&quot;">​</a></h3><p>在网页即客户端中我们也可以通过 <code>js</code> 代码来设置 <code>cookie</code>。如我当前打开的网址为<code>http://dxw.st.sankuai.com/mp/</code>，在控制台中我们执行了下面代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Jonh; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>查看浏览器 <code>cookie</code> 面板如下图所示，<code>cookie</code> 确实设置成功了，而且属性选项 <code>domain、path、expires</code> 都用了默认值。</p><p><img src="'+h+'" alt="cookie"></p><p>再执行下面代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age=12; expires=Thu, 26 Feb 2116 11:50:25 GMT; domain=sankuai.com; path=/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>查看浏览器 <code>cookie</code> 面板，如下图所示，新的 <code>cookie</code> 设置成功了，而且属性选项 <code>domain、path、expires</code> 都变成了设定的值。</p><p><img src="'+n+`" alt="cookie"></p><p>注意：</p><ul><li>客户端可以设置 <code>cookie</code> 的下列选项：<code>expires、domain、path、secure</code>（有条件：只有在 <code>https</code> 协议的网页中，客户端设置 <code>secure</code> 类型的 <code>cookie</code> 才能成功），但无法设置 <code>HttpOnly</code> 选项。</li></ul><h4 id="用-js-如何设置多个-cookie" tabindex="-1">用 js 如何设置多个 cookie <a class="header-anchor" href="#用-js-如何设置多个-cookie" aria-label="Permalink to &quot;用 js 如何设置多个 cookie&quot;">​</a></h4><p>当要设置多个 <code>cookie</code> 时， <code>js</code> 代码很自然地我们会这么写：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Jonh; age=12; class=111&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>但你会发现这样写只是添加了第一个 <code>cookie</code>:<code>name=John</code>，后面的所有 <code>cookie</code> 都没有添加成功。所以最简单的设置多个 <code>cookie</code> 的方法就在重复执行 <code>document.cookie = &quot;key=name&quot;</code>，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;name=Jonh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;age=12&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;class=111&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="如何修改、删除" tabindex="-1">如何修改、删除 <a class="header-anchor" href="#如何修改、删除" aria-label="Permalink to &quot;如何修改、删除&quot;">​</a></h2><h3 id="修改-cookie" tabindex="-1">修改 cookie <a class="header-anchor" href="#修改-cookie" aria-label="Permalink to &quot;修改 cookie&quot;">​</a></h3><p>要想修改一个 <code>cookie</code>，只需要重新赋值就行，旧的值会被新的值覆盖。但要注意一点，在设置新 <code>cookie</code> 时，<code>path/domain</code> 这几个选项一定要旧 <code>cookie</code> 保持一样。否则不会修改旧值，而是添加了一个新的 <code>cookie</code>。</p><h3 id="删除-cookie" tabindex="-1">删除 cookie <a class="header-anchor" href="#删除-cookie" aria-label="Permalink to &quot;删除 cookie&quot;">​</a></h3><p>删除一个 <code>cookie</code> 也挺简单，也是重新赋值，只要将这个新 <code>cookie</code> 的 <code>expires</code> 选项设置为一个过去的时间点就行了。但同样要注意，<code>path/domain/</code>这几个选项一定要旧 <code>cookie</code> 保持一样。</p><h2 id="cookie-编码" tabindex="-1">cookie 编码 <a class="header-anchor" href="#cookie-编码" aria-label="Permalink to &quot;cookie 编码&quot;">​</a></h2><p><code>cookie</code> 其实是个字符串，但这个字符串中逗号、分号、空格被当做了特殊符号。所以当 <code>cookie</code> 的 <code>key</code> 和 <code>value</code> 中含有这 3 个特殊字符时，需要对其进行额外编码，一般会用 <code>escape</code> 进行编码，读取时用 <code>unescape</code> 进行解码；当然也可以用 <code>encodeURIComponent/decodeURIComponent</code> 或者 <code>encodeURI/decodeURI</code>（三者的区别可以参考这篇文章）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> escape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this is a value contain , and ;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;=&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;; expires=Thu, 26 Feb 2116 11:50:25 GMT; domain=sankuai.com; path=/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="跨域请求中-cookie" tabindex="-1">跨域请求中 cookie <a class="header-anchor" href="#跨域请求中-cookie" aria-label="Permalink to &quot;跨域请求中 cookie&quot;">​</a></h2><p>之前在介绍 <code>XHR</code> 的一篇文章里面提过：默认情况下，在发生跨域时，<code>cookie</code> 作为一种 <code>credential</code> 信息是不会被传送到服务端的。必须要进行额外设置才可以。具体原因和如何设置可以参考我的这篇文章：你真的会使用 <code>XMLHttpRequest</code> 吗？</p><p>另外，关于跨域资源共享 <code>CORS</code> 极力推荐大家阅读阮一峰老师的这篇 <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noreferrer">跨域资源共享 CORS 详解</a>。</p><h2 id="其他补充" tabindex="-1">其他补充 <a class="header-anchor" href="#其他补充" aria-label="Permalink to &quot;其他补充&quot;">​</a></h2><ol><li>什么时候 <code>cookie</code> 会被覆盖：<code>name/domain/path</code> 这 3 个字段都相同的时候；</li><li>关于 <code>domain</code> 的补充说明：</li></ol><ul><li>如果显式设置了 <code>domain</code>，则设置成什么，浏览器就存成什么；但如果没有显式设置，则浏览器会自动取 <code>url</code> 的 <code>host</code> 作为 <code>domain</code> 值；</li><li>新的规范中，显式设置 <code>domain</code> 时，如果 <code>value</code> 最前面带点，则浏览器处理时会将这个点去掉，所以最后浏览器存的就是没有点的（注意：但目前大多数浏览器并未全部这么实现）</li><li>前面带点‘.’和不带点‘.’有啥区别： <ul><li>带点：任何 <code>subdomain</code> 都可以访问，包括父 <code>domain</code></li><li>不带点：只有完全一样的域名才能访问，<code>subdomain</code> 不能（但在 <code>IE</code> 下比较特殊，它支持 <code>subdomain</code> 访问）</li></ul></li></ul>`,89),u=[r];function m(g,E,b,y,x,q){return c(),o("div",null,u)}const v=e(l,[["render",m]]);export{_ as __pageData,v as default};
