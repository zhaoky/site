import{_ as s,c as i,o as a,U as n}from"./chunks/framework.H2RWGpQP.js";const E=JSON.parse('{"title":"用 GitLab CI 进行持续集成（转）","description":"","frontmatter":{},"headers":[],"relativePath":"misc/312.md","filePath":"misc/312.md"}'),e={name:"misc/312.md"},l=n(`<h1 id="用-gitlab-ci-进行持续集成-转" tabindex="-1">用 GitLab CI 进行持续集成（转） <a class="header-anchor" href="#用-gitlab-ci-进行持续集成-转" aria-label="Permalink to &quot;用 GitLab CI 进行持续集成（转）&quot;">​</a></h1><blockquote><p>原文链接: <code>https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/</code></p></blockquote><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>从 <code>GitLab 8.0</code> 开始，<code>GitLab CI</code> 就已经集成在 <code>GitLab</code> 中，我们只要在项目中添加一个 <code>.gitlab-ci.yml</code> 文件，然后添加一个 <code>Runner</code>，即可进行持续集成。 而且随着 <code>GitLab</code> 的升级，<code>GitLab CI</code> 变得越来越强大，本文将介绍如何使用 <code>GitLab CI</code> 进行持续集成。</p><h2 id="一些概念" tabindex="-1">一些概念 <a class="header-anchor" href="#一些概念" aria-label="Permalink to &quot;一些概念&quot;">​</a></h2><p>在介绍 <code>GitLab CI</code> 之前，我们先看看一些持续集成相关的概念。</p><h3 id="pipeline" tabindex="-1">Pipeline <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;Pipeline&quot;">​</a></h3><p>一次 <code>Pipeline</code> 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。 任何提交或者 <code>Merge Request</code> 的合并都可以触发 <code>Pipeline</code>，如下图所示：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +------------------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           +----------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  trigger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    +---------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Pipeline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                |</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    +------------------+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           +----------------+</span></span></code></pre></div><h3 id="stages" tabindex="-1">Stages <a class="header-anchor" href="#stages" aria-label="Permalink to &quot;Stages&quot;">​</a></h3><p><code>Stages</code> 表示构建阶段，说白了就是上面提到的流程。 我们可以在一次 <code>Pipeline</code> 中定义多个 <code>Stages</code>，这些 <code>Stages</code> 会有以下特点：</p><ul><li>所有 <code>Stages</code> 会按照顺序运行，即当一个 <code>Stage</code> 完成后，下一个 <code>Stage</code> 才会开始</li><li>只有当所有 <code>Stages</code> 完成后，该构建任务 (<code>Pipeline</code>) 才会成功</li><li>如果任何一个 <code>Stage</code> 失败，那么后面的 <code>Stages</code> 不会执行，该构建任务 (<code>Pipeline</code>) 失败</li><li>因此，<code>Stages</code> 和 <code>Pipeline</code> 的关系就是：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +--------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pipeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +-----------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +------------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +------------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Stage </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |----&gt;|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Stage </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |-----&gt;|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Stage </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +-----------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +------------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +------------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +--------------------------------------------------------+</span></span></code></pre></div><h3 id="jobs" tabindex="-1">Jobs <a class="header-anchor" href="#jobs" aria-label="Permalink to &quot;Jobs&quot;">​</a></h3><p><code>Jobs</code> 表示构建工作，表示某个 <code>Stage</code> 里面执行的工作。 我们可以在 <code>Stages</code> 里面定义多个 <code>Jobs</code>，这些 <code>Jobs</code> 会有以下特点：</p><ul><li>相同 <code>Stage</code> 中的 <code>Jobs</code> 会并行执行</li><li>相同 <code>Stage</code> 中的 <code>Jobs</code> 都执行成功时，该 <code>Stage</code> 才会成功</li><li>如果任何一个 <code>Job</code> 失败，那么该 <code>Stage</code> 失败，即该构建任务 (<code>Pipeline</code>) 失败</li></ul><p>所以，<code>Jobs</code> 和 <code>Stage</code> 的关系图就是：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    +------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                          |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Stage </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                          |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +---------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +---------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +---------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Job </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Job </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Job </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +---------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +---------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  +---------+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                          |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    +------------------------------------------+</span></span></code></pre></div><h2 id="gitlab-runner" tabindex="-1">GitLab Runner <a class="header-anchor" href="#gitlab-runner" aria-label="Permalink to &quot;GitLab Runner&quot;">​</a></h2><h3 id="runner-简介" tabindex="-1">Runner 简介 <a class="header-anchor" href="#runner-简介" aria-label="Permalink to &quot;Runner 简介&quot;">​</a></h3><p>理解了上面的基本概念之后，有没有觉得少了些什么东西 —— 由谁来执行这些构建任务呢？ 答案就是 <code>GitLab Runner</code> 了！</p><p>想问为什么不是 <code>GitLab CI</code> 来运行那些构建任务？ 一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 <code>GitLab CI</code> 又是 <code>GitLab</code> 的一部分，如果由 <code>GitLab CI</code> 来运行构建任务的话，在执行构建任务的时候，<code>GitLab</code> 的性能会大幅下降。</p><p><code>GitLab CI</code> 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 <code>GitLab Runner</code> 来做拉！ 因为 <code>GitLab Runner</code> 可以安装到不同的机器上，所以在构建任务运行期间并不会影响到 <code>GitLab</code> 的性能~</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>安装 <code>GitLab Runner</code> 太简单了，按照着 <a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noreferrer">官方文档</a> 的教程来就好拉！ 下面是 <code>Debian/Ubuntu/CentOS</code> 的安装方法，其他系统去参考官方文档：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # For Debian/Ubuntu</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab-ci-multi-runner</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # For CentOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab-ci-multi-runner</span></span></code></pre></div><h3 id="注册-runner" tabindex="-1">注册 Runner <a class="header-anchor" href="#注册-runner" aria-label="Permalink to &quot;注册 Runner&quot;">​</a></h3><p>安装好 <code>GitLab Runner</code> 之后，我们只要启动 <code>Runner</code> 然后和 <code>CI</code> 绑定就可以了：</p><ul><li>打开你 <code>GitLab</code> 中的项目页面，在项目设置中找到 <code>runners</code></li><li>运行 <code>sudo gitlab-ci-multi-runner register</code></li><li>输入 <code>CI URL</code></li><li>输入 <code>Token</code></li><li>输入 <code>Runner</code> 的名字</li><li>选择 <code>Runner</code> 的类型，简单起见还是选 <code>Shell</code> 吧</li><li>完成</li></ul><p>当注册好 <code>Runner</code> 之后，可以用 <code>sudo gitlab-ci-multi-runner list</code> 命令来查看各个 <code>Runner</code> 的状态：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    $</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitlab-runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Listing</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configured</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runners</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          ConfigFile=/etc/gitlab-runner/config.toml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    my-runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                           Executor=shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Token=cd1cd7cf243afb47094677855aacd3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> URL=http://mygitlab.com/ci</span></span></code></pre></div><h2 id="gitlab-ci-yml" tabindex="-1">.gitlab-ci.yml <a class="header-anchor" href="#gitlab-ci-yml" aria-label="Permalink to &quot;.gitlab-ci.yml&quot;">​</a></h2><h3 id="配置简介" tabindex="-1">配置简介 <a class="header-anchor" href="#配置简介" aria-label="Permalink to &quot;配置简介&quot;">​</a></h3><p>配置好 <code>Runner</code> 之后，我们要做的事情就是在项目根目录中添加 <code>.gitlab-ci.yml</code> 文件了。 当我们添加了 <code>.gitlab-ci.yml</code> 文件后，每次提交代码或者合并 <code>MR</code> 都会自动运行构建任务了。</p><p>还记得 <code>Pipeline</code> 是怎么触发的吗？<code>Pipeline</code> 也是通过提交代码或者合并 <code>MR</code> 来触发的！ 那么 <code>Pipeline</code> 和 <code>.gitlab-ci.yml</code> 有什么关系呢？ 其实 <code>.gitlab-ci.yml</code> 就是在定义 <code>Pipeline</code> 而已拉！</p><h3 id="基本写法" tabindex="-1">基本写法 <a class="header-anchor" href="#基本写法" aria-label="Permalink to &quot;基本写法&quot;">​</a></h3><p>我们先来看看 <code>.gitlab-ci.yml</code> 是怎么写的：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义 stages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义 job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">job1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;I am job1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;I am in test stage&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义 job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">job2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;I am job2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;I am in build stage&quot;</span></span></code></pre></div><p>写起来很简单吧！用 <code>stages</code> 关键字来定义 <code>Pipeline</code> 中的各个构建阶段，然后用一些非关键字来定义 <code>jobs</code>。 每个 <code>job</code> 中可以可以再用 <code>stage</code> 关键字来指定该 <code>job</code> 对应哪个 <code>stage</code>。 <code>job</code> 里面的 <code>script</code> 关键字是最关键的地方了，也是每个 <code>job</code> 中必须要包含的，它表示每个 <code>job</code> 要执行的命令。</p><p>回想一下我们之前提到的 <code>Stages</code> 和 <code>Jobs</code> 的关系，然后猜猜上面例子的运行结果？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> am job2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> am </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build stage</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> am job1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> am </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test stage</span></span></code></pre></div><p>根据我们在 <code>stages</code> 中的定义，<code>build</code> 阶段要在 <code>test</code> 阶段之前运行，所以 <code>stage:build</code> 的 <code>jobs</code> 会先运行，之后才会运行 <code>stage:test</code> 的 <code>jobs</code>。</p><h3 id="常用的关键字" tabindex="-1">常用的关键字 <a class="header-anchor" href="#常用的关键字" aria-label="Permalink to &quot;常用的关键字&quot;">​</a></h3><p>下面介绍一些常用的关键字，想要更加详尽的内容请前往 <a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noreferrer">官方文档</a></p><h4 id="stages-1" tabindex="-1">stages <a class="header-anchor" href="#stages-1" aria-label="Permalink to &quot;stages&quot;">​</a></h4><p>定义 <code>Stages</code>，默认有三个 <code>Stages</code>，分别是 <code>build, test, deploy</code>。</p><h4 id="types" tabindex="-1">types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;types&quot;">​</a></h4><p><code>stages</code> 的别名。</p><h4 id="before-script" tabindex="-1">before_script <a class="header-anchor" href="#before-script" aria-label="Permalink to &quot;before_script&quot;">​</a></h4><p>定义任何 Jobs 运行前都会执行的命令。</p><h4 id="after-script" tabindex="-1">after_script <a class="header-anchor" href="#after-script" aria-label="Permalink to &quot;after_script&quot;">​</a></h4><blockquote><p>要求 GitLab 8.7+ 和 GitLab Runner 1.2+</p></blockquote><p>定义任何 Jobs 运行完后都会执行的命令。</p><h4 id="variables-job-variables" tabindex="-1">variables &amp;&amp; Job.variables <a class="header-anchor" href="#variables-job-variables" aria-label="Permalink to &quot;variables &amp;&amp; Job.variables&quot;">​</a></h4><blockquote><p>要求 GitLab Runner 0.5.0+</p></blockquote><p>定义环境变量。 如果定义了 <code>Job</code> 级别的环境变量的话，该 <code>Job</code> 会优先使用 <code>Job</code> 级别的环境变量。 <a href="https://docs.gitlab.com/ce/ci/variables/README.html" target="_blank" rel="noreferrer">查看更多</a></p><h4 id="cache-job-cache" tabindex="-1">cache &amp;&amp; Job.cache <a class="header-anchor" href="#cache-job-cache" aria-label="Permalink to &quot;cache &amp;&amp; Job.cache&quot;">​</a></h4><blockquote><p>要求 GitLab Runner 0.7.0+</p></blockquote><p>定义需要缓存的文件。 每个 <code>Job</code> 开始的时候，<code>Runner</code> 都会删掉 <code>.gitignore</code> 里面的文件。 如果有些文件 (如 <code>node_modules/</code>) 需要多个 <code>Jobs</code> 共用的话，我们只能让每个 <code>Job</code> 都先执行一遍 <code>npm install</code>。 这样很不方便，因此我们需要对这些文件进行缓存。缓存了的文件除了可以跨 <code>Jobs</code> 使用外，还可以跨 <code>Pipeline</code> 使用。</p><p>具体用法请查看 <a href="http://docs.gitlab.com/ce/ci/yaml/README.html#cache" target="_blank" rel="noreferrer">官方文档</a>。</p><h4 id="job-script" tabindex="-1">Job.script <a class="header-anchor" href="#job-script" aria-label="Permalink to &quot;Job.script&quot;">​</a></h4><p>定义 <code>Job</code> 要运行的命令，必填项。</p><h4 id="job-stage" tabindex="-1">Job.stage <a class="header-anchor" href="#job-stage" aria-label="Permalink to &quot;Job.stage&quot;">​</a></h4><p>定义 <code>Job</code> 的 <code>stage</code>，默认为 <code>test</code>。</p><h4 id="job-artifacts" tabindex="-1">Job.artifacts <a class="header-anchor" href="#job-artifacts" aria-label="Permalink to &quot;Job.artifacts&quot;">​</a></h4><p>定义 <code>Job</code> 中生成的附件。 当该 <code>Job</code> 运行成功后，生成的文件可以作为附件 (如生成的二进制文件) 保留下来，打包发送到 <code>GitLab</code>，之后我们可以在 <code>GitLab</code> 的项目页面下下载该附件。 注意，不要把 <code>artifacts</code> 和 <code>cache</code> 混淆了。</p><h3 id="实用例子" tabindex="-1">实用例子 <a class="header-anchor" href="#实用例子" aria-label="Permalink to &quot;实用例子&quot;">​</a></h3><p>下面给出一个我自己在用的例子：</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">stages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install_deps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy_test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy_production</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${CI_BUILD_REF_NAME}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node_modules/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dist/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">install_deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install_deps</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行测试用例</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编译</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">develop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run clean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build:client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build:server</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部署测试服务器</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">deploy_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy_test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">develop</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pm2 delete app || true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pm2 start app.js --name app</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部署生产服务器</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">deploy_production</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy_production</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">master</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash scripts/deploy/deploy.sh</span></span></code></pre></div><p>上面的配置把一次 <code>Pipeline</code> 分成五个阶段：</p><ul><li>安装依赖(<code>install_deps</code>)</li><li>运行测试(<code>test</code>)</li><li>编译(<code>build</code>)</li><li>部署测试服务器(<code>deploy_test</code>)</li><li>部署生产服务器(<code>deploy_production</code>)</li></ul><p>设置 <code>Job.only</code> 后，只有当 <code>develop</code> 分支和 <code>master</code> 分支有提交的时候才会触发相关的 <code>Jobs</code>。注意，我这里用 <code>GitLab Runner</code> 所在的服务器作为测试服务器。</p>`,72),t=[l];function h(p,k,d,c,o,r){return a(),i("div",null,t)}const y=s(e,[["render",h]]);export{E as __pageData,y as default};
